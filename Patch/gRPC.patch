diff --git a/CMakeLists.txt b/CMakeLists.txt
index c5123edadf..bd63b9caec 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -50,6 +50,9 @@ set(gRPC_BUILD_MSVC_MP_COUNT 0 CACHE STRING "The maximum number of processes for
 option(gRPC_BUILD_TESTS "Build tests" OFF)
 option(gRPC_BUILD_CODEGEN "Build codegen" ON)
 option(gRPC_DOWNLOAD_ARCHIVES "Download archives for empty 3rd party directories" ON)
+option(gRPC_BUILD_CSHARP_EXT "Build C# extensions" ON)
+option(gRPC_BACKWARDS_COMPATIBILITY_MODE "Build libraries that are binary compatible across a larger number of OS and libc versions" OFF)
+option(gRPC_USE_CARES "Use c-ares as DNS requests library" ON)
 
 set(gRPC_INSTALL_default ON)
 if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
@@ -328,13 +331,17 @@ if(UNIX OR APPLE)
   endif()
 endif()
 
+if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+  # Clang warning suppressions
+  add_definitions(-Wno-error=register)
+endif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+
 # configure ccache if requested
 include(cmake/ccache.cmake)
 
 include(cmake/abseil-cpp.cmake)
 include(cmake/address_sorting.cmake)
 include(cmake/benchmark.cmake)
-include(cmake/cares.cmake)
 include(cmake/protobuf.cmake)
 include(cmake/re2.cmake)
 include(cmake/ssl.cmake)
@@ -343,6 +350,13 @@ include(cmake/xxhash.cmake)
 include(cmake/zlib.cmake)
 include(cmake/download_archive.cmake)
 
+if (gRPC_USE_CARES)
+ add_definitions("-DGRPC_ARES=1")
+ include(cmake/cares.cmake)
+else()
+ add_definitions("-DGRPC_ARES=0")
+endif()
+
 if(_gRPC_PLATFORM_LINUX OR _gRPC_PLATFORM_POSIX)
   include(cmake/systemd.cmake)
   set(_gRPC_ALLTARGETS_LIBRARIES ${_gRPC_ALLTARGETS_LIBRARIES} ${_gRPC_SYSTEMD_LIBRARIES})
@@ -1573,8 +1587,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/address_sorting.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/address_sorting.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -1676,8 +1691,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/gpr.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/gpr.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -2597,8 +2613,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -2773,8 +2790,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_test_util.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc_test_util.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -2839,8 +2857,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_test_util_unsecure.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc_test_util_unsecure.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3303,8 +3322,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_unsecure.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc_unsecure.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3966,8 +3986,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/benchmark_helpers.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/benchmark_helpers.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4088,8 +4109,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4366,8 +4388,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_alts.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_alts.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4438,8 +4461,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_error_details.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_error_details.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4520,8 +4544,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_reflection.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_reflection.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4596,8 +4621,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_test.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_test.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4668,8 +4694,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_test_config.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_test_config.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4743,8 +4770,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_test_util.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_test_util.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4834,8 +4862,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_unsecure.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_unsecure.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -5385,8 +5414,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_authorization_provider.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc_authorization_provider.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -5545,8 +5575,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_plugin_support.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc_plugin_support.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -5626,8 +5657,9 @@ if(WIN32 AND MSVC)
     )
   endif()
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpcpp_channelz.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpcpp_channelz.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
diff --git a/include/grpc/support/port_platform.h b/include/grpc/support/port_platform.h
index d2ef98e41b..15875eda15 100644
--- a/include/grpc/support/port_platform.h
+++ b/include/grpc/support/port_platform.h
@@ -97,7 +97,7 @@
 #endif
 
 #ifndef NOMINMAX
-#define GRPC_NOMINMX_WAS_NOT_DEFINED
+#define GRPC_NOMINMAX_WAS_NOT_DEFINED
 #define NOMINMAX
 #endif /* NOMINMAX */
 
@@ -124,9 +124,21 @@
 #endif /* defined(_WIN64) || defined(WIN64) || defined(_WIN32) || \
           defined(WIN32) */
 #else
+#if defined(GRPC_DLL_EXPORTS)
+#define GRPC_DLL __attribute__((visibility("default")))
+#else
 #define GRPC_DLL
+#endif
+#if defined(GRPCXX_DLL_EXPORTS)
+#define GRPCXX_DLL __attribute__((visibility("default")))
+#else
 #define GRPCXX_DLL
+#endif
+#if defined(GPR_DLL_EXPORTS)
+#define GPR_DLL __attribute__((visibility("default")))
+#else
 #define GPR_DLL
+#endif
 #endif /* defined(_WIN32_WINNT) */
 
 /* Override this file with one for your platform if you need to redefine
@@ -715,11 +727,11 @@ extern void gpr_unreachable_code(const char* reason, const char* file,
 #endif /* GPR_FORBID_UNREACHABLE_CODE */
 
 #ifndef GPRAPI
-#define GPRAPI
+#define GPRAPI GPR_DLL
 #endif
 
 #ifndef GRPCAPI
-#define GRPCAPI GPRAPI
+#define GRPCAPI GRPC_DLL
 #endif
 
 #ifndef CENSUSAPI
diff --git a/include/grpcpp/impl/rpc_service_method.h b/include/grpcpp/impl/rpc_service_method.h
index 73694263cd..ba0e1009a9 100644
--- a/include/grpcpp/impl/rpc_service_method.h
+++ b/include/grpcpp/impl/rpc_service_method.h
@@ -144,6 +144,7 @@ class RpcServiceMethod : public RpcMethod {
       default:
         GPR_UNREACHABLE_CODE(return "unknown");
     }
+    return "";
   }
 };
 }  // namespace internal
diff --git a/include/grpcpp/server_context.h b/include/grpcpp/server_context.h
index 243d149205..9988891f20 100644
--- a/include/grpcpp/server_context.h
+++ b/include/grpcpp/server_context.h
@@ -121,7 +121,8 @@ class ServerMetricRecorder;
 }  // namespace experimental
 
 /// Base class of ServerContext.
-class ServerContextBase {
+class GRPCXX_DLL ServerContextBase {
  public:
   virtual ~ServerContextBase();
 
diff --git a/include/grpcpp/server_interface.h b/include/grpcpp/server_interface.h
index d990d8c7ac..c37689a58f 100644
--- a/include/grpcpp/server_interface.h
+++ b/include/grpcpp/server_interface.h
@@ -57,7 +57,8 @@ class ServerInterceptorFactoryInterface;
 class ServerMetricRecorder;
 }  // namespace experimental
 
-class ServerInterface : public internal::CallHook {
+class GRPCXX_DLL ServerInterface : public internal::CallHook {
  public:
   ~ServerInterface() override {}
 
diff --git a/src/core/lib/gprpp/time.h b/src/core/lib/gprpp/time.h
index 65aa968bc8..b28fbe35e5 100644
--- a/src/core/lib/gprpp/time.h
+++ b/src/core/lib/gprpp/time.h
@@ -323,8 +323,8 @@ inline Timestamp operator+(Duration lhs, Timestamp rhs) { return rhs + lhs; }
 
 inline Duration operator-(Timestamp lhs, Timestamp rhs) {
   return Duration::Milliseconds(
-      time_detail::MillisAdd(lhs.milliseconds_after_process_epoch(),
-                             -rhs.milliseconds_after_process_epoch()));
+      time_detail::MillisAdd((int64_t)lhs.milliseconds_after_process_epoch(),
+                             -((int64_t)rhs.milliseconds_after_process_epoch())));
 }
 
 inline Duration operator*(Duration lhs, double rhs) {
diff --git a/src/core/lib/promise/detail/promise_like.h b/src/core/lib/promise/detail/promise_like.h
index 395c325873..c5c41992f5 100644
--- a/src/core/lib/promise/detail/promise_like.h
+++ b/src/core/lib/promise/detail/promise_like.h
@@ -71,7 +71,13 @@ class PromiseLike<void>;
 
 template <typename F>
 class PromiseLike<F, absl::enable_if_t<!std::is_void<
-                         typename std::result_of<F()>::type>::value>> {
+#if (defined(__cpp_lib_is_invocable) && __cpp_lib_is_invocable >= 201703L) || \
+(defined(_MSVC_LANG) && _MSVC_LANG >= 201703L)
+                         std::invoke_result_t<F>
+#else
+                         typename std::result_of<F()>::type
+#endif
+                         >::value>> {
  private:
   GPR_NO_UNIQUE_ADDRESS F f_;
 
diff --git a/third_party/upb/upb/message/internal/array.h b/third_party/upb/upb/message/internal/array.h
index e8e8429cfd..b2082c9594 100644
--- a/third_party/upb/upb/message/internal/array.h
+++ b/third_party/upb/upb/message/internal/array.h
@@ -120,7 +120,7 @@ UPB_INLINE bool _upb_Array_ResizeUninitialized(upb_Array* arr, size_t size,
 UPB_INLINE void _upb_Array_Set(upb_Array* arr, size_t i, const void* data,
                                size_t elem_size) {
   UPB_ASSERT(i < arr->size);
-  UPB_ASSERT(elem_size == 1U << _upb_Array_ElementSizeLg2(arr));
+  UPB_ASSERT(elem_size == (size_t)(1ULL << _upb_Array_ElementSizeLg2(arr)));
   char* arr_data = (char*)_upb_array_ptr(arr);
   memcpy(arr_data + (i * elem_size), data, elem_size);
 }
