diff --git a/CMake/AbseilHelpers.cmake b/CMake/AbseilHelpers.cmake
index c53b3584..f50b1135 100644
--- a/CMake/AbseilHelpers.cmake
+++ b/CMake/AbseilHelpers.cmake
@@ -200,21 +200,6 @@ function(absl_cc_library)
       endif()
     endforeach()
     string(REPLACE ";" " " PC_LINKOPTS "${ABSL_CC_LIB_LINKOPTS}")
-    FILE(GENERATE OUTPUT "${CMAKE_BINARY_DIR}/lib/pkgconfig/absl_${_NAME}.pc" CONTENT "\
-prefix=${CMAKE_INSTALL_PREFIX}\n\
-exec_prefix=\${prefix}\n\
-libdir=${CMAKE_INSTALL_FULL_LIBDIR}\n\
-includedir=${CMAKE_INSTALL_FULL_INCLUDEDIR}\n\
-\n\
-Name: absl_${_NAME}\n\
-Description: Abseil ${_NAME} library\n\
-URL: https://abseil.io/\n\
-Version: ${PC_VERSION}\n\
-Requires:${PC_DEPS}\n\
-Libs: -L\${libdir} $<$<NOT:$<BOOL:${ABSL_CC_LIB_IS_INTERFACE}>>:${LNK_LIB}> ${PC_LINKOPTS}\n\
-Cflags: -I\${includedir}${PC_CFLAGS}\n")
-    INSTALL(FILES "${CMAKE_BINARY_DIR}/lib/pkgconfig/absl_${_NAME}.pc"
-            DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
   endif()
 
   if(NOT ABSL_CC_LIB_IS_INTERFACE)
@@ -256,6 +241,12 @@ Cflags: -I\${includedir}${PC_CFLAGS}\n")
         ${ABSL_CC_LIB_LINKOPTS}
         ${ABSL_DEFAULT_LINKOPTS}
       )
+      if(WIN32 AND ABSL_ENABLE_INSTALL)
+        install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/absl_${_NAME}.pdb
+          DESTINATION ${CMAKE_INSTALL_LIBDIR}
+          CONFIGURATIONS Debug
+        )
+      endif()
     else()
       message(FATAL_ERROR "Invalid build type: ${_build_type}")
     endif()
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 194f8708..a5d95316 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -187,20 +187,21 @@ add_subdirectory(absl)
 
 if(ABSL_ENABLE_INSTALL)
   
+  set(ABSL_CMAKE_INSTALL_PATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_CMAKEDIR}")
 
   # install as a subdirectory only
   install(EXPORT ${PROJECT_NAME}Targets
     NAMESPACE absl::
-    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+    DESTINATION ${ABSL_CMAKE_INSTALL_PATH}
   )
 
   configure_package_config_file(
     CMake/abslConfig.cmake.in
     "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
-    INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+    INSTALL_DESTINATION ${ABSL_CMAKE_INSTALL_PATH}
   )
   install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
-    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+    DESTINATION ${ABSL_CMAKE_INSTALL_PATH}
   )
 
   # Abseil only has a version in LTS releases.  This mechanism is accomplished
@@ -213,7 +214,7 @@ if(ABSL_ENABLE_INSTALL)
     )
 
     install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
-      DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+      DESTINATION ${ABSL_CMAKE_INSTALL_PATH}
     )
   endif()  # absl_VERSION
 
diff --git a/absl/base/config.h b/absl/base/config.h
index 762bb7f7..ddeff8a8 100644
--- a/absl/base/config.h
+++ b/absl/base/config.h
@@ -747,7 +747,9 @@ static_assert(ABSL_INTERNAL_INLINE_NAMESPACE_STR[0] != 'h' ||
 #define ABSL_DLL __declspec(dllimport)
 #else
 #define ABSL_DLL
-#endif
+#endif // defined(ABSL_BUILD_DLL)
+#elif defined(ABSL_BUILD_DLL)
+#define ABSL_DLL __attribute__((visibility("default")))
 #else
 #define ABSL_DLL
 #endif  // defined(_MSC_VER)
@@ -759,7 +761,9 @@ static_assert(ABSL_INTERNAL_INLINE_NAMESPACE_STR[0] != 'h' ||
 #define ABSL_TEST_DLL __declspec(dllimport)
 #else
 #define ABSL_TEST_DLL
-#endif
+#endif // defined(ABSL_BUILD_TEST_DLL)
+#elif defined(ABSL_BUILD_TEST_DLL)
+#define ABSL_TEST_DLL __attribute__((visibility("default")))
 #else
 #define ABSL_TEST_DLL
 #endif  // defined(_MSC_VER)
diff --git a/absl/base/internal/spinlock_wait.h b/absl/base/internal/spinlock_wait.h
index 9a1adcda..082f1449 100644
--- a/absl/base/internal/spinlock_wait.h
+++ b/absl/base/internal/spinlock_wait.h
@@ -73,9 +73,9 @@ ABSL_NAMESPACE_END
 // By changing our extension points to be extern "C", we dodge this
 // check.
 extern "C" {
-void ABSL_INTERNAL_C_SYMBOL(AbslInternalSpinLockWake)(std::atomic<uint32_t> *w,
+ABSL_DLL void ABSL_INTERNAL_C_SYMBOL(AbslInternalSpinLockWake)(std::atomic<uint32_t> *w,
                                                       bool all);
-void ABSL_INTERNAL_C_SYMBOL(AbslInternalSpinLockDelay)(
+ABSL_DLL void ABSL_INTERNAL_C_SYMBOL(AbslInternalSpinLockDelay)(
     std::atomic<uint32_t> *w, uint32_t value, int loop,
     absl::base_internal::SchedulingMode scheduling_mode);
 }
diff --git a/absl/container/internal/btree.h b/absl/container/internal/btree.h
index 91df57a3..7e2d59e7 100644
--- a/absl/container/internal/btree.h
+++ b/absl/container/internal/btree.h
@@ -1575,7 +1575,7 @@ class btree {
   }
 
   // Verifies the structure of the btree.
-  void verify() const;
+  void verify_struct() const;
 
   // Size routines.
   size_type size() const { return size_; }
@@ -2600,7 +2600,7 @@ void btree<P>::swap(btree &other) {
 }
 
 template <typename P>
-void btree<P>::verify() const {
+void btree<P>::verify_struct() const {
   assert(root() != nullptr);
   assert(leftmost() != nullptr);
   assert(rightmost() != nullptr);
diff --git a/absl/container/internal/btree_container.h b/absl/container/internal/btree_container.h
index a68ce445..fa9d8bcf 100644
--- a/absl/container/internal/btree_container.h
+++ b/absl/container/internal/btree_container.h
@@ -221,7 +221,7 @@ class btree_container {
   // Utility routines.
   ABSL_ATTRIBUTE_REINITIALIZES void clear() { tree_.clear(); }
   void swap(btree_container &other) { tree_.swap(other.tree_); }
-  void verify() const { tree_.verify(); }
+  void verify_struct() const { tree_.verify_struct(); }
 
   // Size routines.
   size_type size() const { return tree_.size(); }
diff --git a/absl/container/internal/layout.h b/absl/container/internal/layout.h
index a4ba6101..cfc5423e 100644
--- a/absl/container/internal/layout.h
+++ b/absl/container/internal/layout.h
@@ -287,7 +287,7 @@ constexpr size_t Max(size_t a, size_t b, Ts... rest) {
 template <class T>
 std::string TypeName() {
   std::string out;
-#if ABSL_INTERNAL_HAS_RTTI
+#if defined(ABSL_INTERNAL_HAS_RTTI) && ABSL_INTERNAL_HAS_RTTI
   absl::StrAppend(&out, "<",
                   absl::debugging_internal::DemangleString(typeid(T).name()),
                   ">");
diff --git a/absl/container/internal/raw_hash_set.h b/absl/container/internal/raw_hash_set.h
index 3518bc34..d0b99bd4 100644
--- a/absl/container/internal/raw_hash_set.h
+++ b/absl/container/internal/raw_hash_set.h
@@ -2250,7 +2250,7 @@ class raw_hash_set {
   }
 
   raw_hash_set& operator=(raw_hash_set&& that) noexcept(
-      absl::allocator_traits<allocator_type>::is_always_equal::value &&
+      std::is_empty<allocator_type>::type::value &&
       std::is_nothrow_move_assignable<hasher>::value &&
       std::is_nothrow_move_assignable<key_equal>::value) {
     // TODO(sbenza): We should only use the operations from the noexcept clause
diff --git a/absl/flags/parse.cc b/absl/flags/parse.cc
index 526b61d1..93b484fb 100644
--- a/absl/flags/parse.cc
+++ b/absl/flags/parse.cc
@@ -99,64 +99,6 @@ struct SpecifiedFlagsCompare {
 ABSL_NAMESPACE_END
 }  // namespace absl
 
-// These flags influence how command line flags are parsed and are only intended
-// to be set on the command line.  Avoid reading or setting them from C++ code.
-ABSL_FLAG(std::vector<std::string>, flagfile, {},
-          "comma-separated list of files to load flags from")
-    .OnUpdate([]() {
-      if (absl::GetFlag(FLAGS_flagfile).empty()) return;
-
-      absl::MutexLock l(&absl::flags_internal::processing_checks_guard);
-
-      // Setting this flag twice before it is handled most likely an internal
-      // error and should be reviewed by developers.
-      if (absl::flags_internal::flagfile_needs_processing) {
-        ABSL_INTERNAL_LOG(WARNING, "flagfile set twice before it is handled");
-      }
-
-      absl::flags_internal::flagfile_needs_processing = true;
-    });
-ABSL_FLAG(std::vector<std::string>, fromenv, {},
-          "comma-separated list of flags to set from the environment"
-          " [use 'export FLAGS_flag1=value']")
-    .OnUpdate([]() {
-      if (absl::GetFlag(FLAGS_fromenv).empty()) return;
-
-      absl::MutexLock l(&absl::flags_internal::processing_checks_guard);
-
-      // Setting this flag twice before it is handled most likely an internal
-      // error and should be reviewed by developers.
-      if (absl::flags_internal::fromenv_needs_processing) {
-        ABSL_INTERNAL_LOG(WARNING, "fromenv set twice before it is handled.");
-      }
-
-      absl::flags_internal::fromenv_needs_processing = true;
-    });
-ABSL_FLAG(std::vector<std::string>, tryfromenv, {},
-          "comma-separated list of flags to try to set from the environment if "
-          "present")
-    .OnUpdate([]() {
-      if (absl::GetFlag(FLAGS_tryfromenv).empty()) return;
-
-      absl::MutexLock l(&absl::flags_internal::processing_checks_guard);
-
-      // Setting this flag twice before it is handled most likely an internal
-      // error and should be reviewed by developers.
-      if (absl::flags_internal::tryfromenv_needs_processing) {
-        ABSL_INTERNAL_LOG(WARNING,
-                          "tryfromenv set twice before it is handled.");
-      }
-
-      absl::flags_internal::tryfromenv_needs_processing = true;
-    });
-
-// Rather than reading or setting --undefok from C++ code, please consider using
-// ABSL_RETIRED_FLAG instead.
-ABSL_FLAG(std::vector<std::string>, undefok, {},
-          "comma-separated list of flag names that it is okay to specify "
-          "on the command line even if the program does not define a flag "
-          "with that name");
-
 namespace absl {
 ABSL_NAMESPACE_BEGIN
 namespace flags_internal {
@@ -435,7 +377,7 @@ bool HandleGeneratorFlags(std::vector<ArgsList>& input_args,
   // multiple times. We are collecting them all into a single list and set
   // the value of FLAGS_flagfile to that value at the end of the parsing.
   if (flags_internal::flagfile_needs_processing) {
-    auto flagfiles = absl::GetFlag(FLAGS_flagfile);
+    auto flagfiles = std::vector<std::string>();
 
     if (input_args.size() == 1) {
       flagfile_value.insert(flagfile_value.end(), flagfiles.begin(),
@@ -451,7 +393,7 @@ bool HandleGeneratorFlags(std::vector<ArgsList>& input_args,
   // programmatically and at runtime on a command line. Unlike flagfile these
   // can't be recursive.
   if (flags_internal::fromenv_needs_processing) {
-    auto flags_list = absl::GetFlag(FLAGS_fromenv);
+    auto flags_list = std::vector<std::string>();
 
     success &= ReadFlagsFromEnv(flags_list, input_args, true);
 
@@ -459,7 +401,7 @@ bool HandleGeneratorFlags(std::vector<ArgsList>& input_args,
   }
 
   if (flags_internal::tryfromenv_needs_processing) {
-    auto flags_list = absl::GetFlag(FLAGS_tryfromenv);
+    auto flags_list = std::vector<std::string>();
 
     success &= ReadFlagsFromEnv(flags_list, input_args, false);
 
@@ -472,27 +414,7 @@ bool HandleGeneratorFlags(std::vector<ArgsList>& input_args,
 // --------------------------------------------------------------------
 
 void ResetGeneratorFlags(const std::vector<std::string>& flagfile_value) {
-  // Setting flagfile to the value which collates all the values set on a
-  // command line and programmatically. So if command line looked like
-  // --flagfile=f1 --flagfile=f2 the final value of the FLAGS_flagfile flag is
-  // going to be {"f1", "f2"}
-  if (!flagfile_value.empty()) {
-    absl::SetFlag(&FLAGS_flagfile, flagfile_value);
-    absl::MutexLock l(&flags_internal::processing_checks_guard);
-    flags_internal::flagfile_needs_processing = false;
-  }
 
-  // fromenv/tryfromenv are set to <undefined> value.
-  if (!absl::GetFlag(FLAGS_fromenv).empty()) {
-    absl::SetFlag(&FLAGS_fromenv, {});
-  }
-  if (!absl::GetFlag(FLAGS_tryfromenv).empty()) {
-    absl::SetFlag(&FLAGS_tryfromenv, {});
-  }
-
-  absl::MutexLock l(&flags_internal::processing_checks_guard);
-  flags_internal::fromenv_needs_processing = false;
-  flags_internal::tryfromenv_needs_processing = false;
 }
 
 // --------------------------------------------------------------------
@@ -591,7 +513,7 @@ std::tuple<bool, absl::string_view> DeduceFlagValue(const CommandLineFlag& flag,
 // --------------------------------------------------------------------
 
 bool CanIgnoreUndefinedFlag(absl::string_view flag_name) {
-  auto undefok = absl::GetFlag(FLAGS_undefok);
+  auto undefok = std::vector<std::string>();
   if (std::find(undefok.begin(), undefok.end(), flag_name) != undefok.end()) {
     return true;
   }
@@ -669,7 +591,7 @@ struct BestHints {
 // the given flag.
 std::vector<std::string> GetMisspellingHints(const absl::string_view flag) {
   const size_t maxCutoff = std::min(flag.size() / 2 + 1, kMaxDistance);
-  auto undefok = absl::GetFlag(FLAGS_undefok);
+  auto undefok = std::vector<std::string>();
   BestHints best_hints(static_cast<uint8_t>(maxCutoff));
   flags_internal::ForEachFlag([&](const CommandLineFlag& f) {
     if (best_hints.hints.size() >= kMaxHints) return;
diff --git a/absl/strings/cord.h b/absl/strings/cord.h
index b3e556b6..19e7dacf 100644
--- a/absl/strings/cord.h
+++ b/absl/strings/cord.h
@@ -168,7 +168,7 @@ enum class CordMemoryAccounting {
 // Additionally, the API provides iterator utilities to iterate through Cord
 // data via chunks or character bytes.
 //
-class Cord {
+class ABSL_DLL Cord {
  private:
   template <typename T>
   using EnableIfString =
@@ -851,7 +851,7 @@ class Cord {
   // to the representation.
   //
   // InlineRep holds either a tree pointer, or an array of kMaxInline bytes.
-  class InlineRep {
+  class ABSL_DLL InlineRep {
    public:
     static constexpr unsigned char kMaxInline = cord_internal::kMaxInline;
     static_assert(kMaxInline >= sizeof(absl::cord_internal::CordRep*), "");
@@ -1083,7 +1083,7 @@ namespace cord_internal {
 
 // Does non-template-specific `CordRepExternal` initialization.
 // Requires `data` to be non-empty.
-void InitializeCordRepExternal(absl::string_view data,
+ABSL_DLL void InitializeCordRepExternal(absl::string_view data,
                                absl::Nonnull<CordRepExternal*> rep);
 
 // Creates a new `CordRep` that owns `data` and `releaser` and returns a pointer
diff --git a/absl/strings/internal/cord_internal.h b/absl/strings/internal/cord_internal.h
index 8744540e..53b36a4e 100644
--- a/absl/strings/internal/cord_internal.h
+++ b/absl/strings/internal/cord_internal.h
@@ -477,7 +477,7 @@ static constexpr cordz_info_t LittleEndianByte(unsigned char value) {
 #endif
 }
 
-class InlineData {
+class ABSL_DLL InlineData {
  public:
   // DefaultInitType forces the use of the default initialization constructor.
   enum DefaultInitType { kDefaultInit };
@@ -678,7 +678,7 @@ class InlineData {
   }
 
  private:
-  struct Rep {
+  struct ABSL_DLL Rep {
     // See cordz_info_t for forced alignment and size of `cordz_info` details.
     struct AsTree {
       explicit constexpr AsTree(absl::cord_internal::CordRep* tree)
diff --git a/absl/strings/internal/cordz_functions.h b/absl/strings/internal/cordz_functions.h
index ed108bf1..1dab77c7 100644
--- a/absl/strings/internal/cordz_functions.h
+++ b/absl/strings/internal/cordz_functions.h
@@ -27,10 +27,10 @@ namespace cord_internal {
 
 // Returns the current sample rate. This represents the average interval
 // between samples.
-int32_t get_cordz_mean_interval();
+ABSL_DLL int32_t get_cordz_mean_interval();
 
 // Sets the sample rate with the average interval between samples.
-void set_cordz_mean_interval(int32_t mean_interval);
+ABSL_DLL void set_cordz_mean_interval(int32_t mean_interval);
 
 // Cordz is only enabled on Linux with thread_local support.
 #if defined(ABSL_INTERNAL_CORDZ_ENABLED)
@@ -45,11 +45,11 @@ void set_cordz_mean_interval(int32_t mean_interval);
 // the value is 1 or less, the code will check on the next event if cordz is
 // enabled, and if so, will sample the Cord. cordz is only enabled when we can
 // use thread locals.
-ABSL_CONST_INIT extern thread_local int64_t cordz_next_sample;
+ABSL_CONST_INIT ABSL_DLL extern thread_local int64_t cordz_next_sample;
 
 // Determines if the next sample should be profiled. If it is, the value pointed
 // at by next_sample will be set with the interval until the next sample.
-bool cordz_should_profile_slow();
+ABSL_DLL bool cordz_should_profile_slow();
 
 // Returns true if the next cord should be sampled.
 inline bool cordz_should_profile() {
diff --git a/absl/strings/internal/cordz_info.h b/absl/strings/internal/cordz_info.h
index 17eaa91c..ae6a75a1 100644
--- a/absl/strings/internal/cordz_info.h
+++ b/absl/strings/internal/cordz_info.h
@@ -44,7 +44,7 @@ namespace cord_internal {
 // and will either be deleted or appended to the global_delete_queue. If it is
 // placed on the global_delete_queue, the CordzInfo object will be cleaned in
 // the destructor of a CordzSampleToken object.
-class ABSL_LOCKABLE CordzInfo : public CordzHandle {
+class ABSL_LOCKABLE ABSL_DLL CordzInfo : public CordzHandle {
  public:
   using MethodIdentifier = CordzUpdateTracker::MethodIdentifier;
 
diff --git a/absl/synchronization/mutex.h b/absl/synchronization/mutex.h
index d53a22bb..c7302795 100644
--- a/absl/synchronization/mutex.h
+++ b/absl/synchronization/mutex.h
@@ -148,7 +148,7 @@ struct SynchWaitParams;
 //
 // See also `MutexLock`, below, for scoped `Mutex` acquisition.
 
-class ABSL_LOCKABLE Mutex {
+class ABSL_LOCKABLE ABSL_DLL Mutex {
  public:
   // Creates a `Mutex` that is not held by anyone. This constructor is
   // typically used for Mutexes allocated on the heap or the stack.
diff --git a/absl/time/internal/cctz/include/cctz/civil_time_detail.h b/absl/time/internal/cctz/include/cctz/civil_time_detail.h
index 2b0aed56..ac77114c 100644
--- a/absl/time/internal/cctz/include/cctz/civil_time_detail.h
+++ b/absl/time/internal/cctz/include/cctz/civil_time_detail.h
@@ -58,7 +58,7 @@ using second_t = std::int_fast8_t;  // [0:59]
 struct fields {
   CONSTEXPR_M fields(year_t year, month_t month, day_t day, hour_t hour,
                      minute_t minute, second_t second)
-      : y(year), m(month), d(day), hh(hour), mm(minute), ss(second) {}
+      : y(year), m(std::int_least8_t(month)), d(std::int_least8_t(day)), hh(std::int_least8_t(hour)), mm(std::int_least8_t(minute)), ss(std::int_least8_t(second)) {}
   std::int_least64_t y;
   std::int_least8_t m;
   std::int_least8_t d;
diff --git a/absl/time/internal/cctz/src/time_zone_format.cc b/absl/time/internal/cctz/src/time_zone_format.cc
index e7e30a2f..404ca57a 100644
--- a/absl/time/internal/cctz/src/time_zone_format.cc
+++ b/absl/time/internal/cctz/src/time_zone_format.cc
@@ -40,7 +40,7 @@
 #include <limits>
 #include <string>
 #include <vector>
-#if !HAS_STRPTIME
+#if !defined(HAS_STRPTIME)
 #include <iomanip>
 #include <sstream>
 #endif
@@ -56,7 +56,7 @@ namespace detail {
 
 namespace {
 
-#if !HAS_STRPTIME
+#if !defined(HAS_STRPTIME)
 // Build a strptime() using C++11's std::get_time().
 char* strptime(const char* s, const char* fmt, std::tm* tm) {
   std::istringstream input(s);
diff --git a/absl/time/internal/cctz/src/time_zone_info.cc b/absl/time/internal/cctz/src/time_zone_info.cc
index b7178a6b..4cbe7301 100644
--- a/absl/time/internal/cctz/src/time_zone_info.cc
+++ b/absl/time/internal/cctz/src/time_zone_info.cc
@@ -682,7 +682,7 @@ bool TimeZoneInfo::Load(ZoneInfoSource* zip) {
   }
   bool seen_type_0 = false;
   for (std::size_t i = 0; i != hdr.timecnt; ++i) {
-    transitions_[i].type_index = Decode8(bp++);
+    transitions_[i].type_index = (uint_least8_t)Decode8(bp++);
     if (transitions_[i].type_index >= hdr.typecnt) return false;
     if (transitions_[i].type_index == 0) seen_type_0 = true;
   }
@@ -698,7 +698,7 @@ bool TimeZoneInfo::Load(ZoneInfoSource* zip) {
       return false;
     bp += 4;
     transition_types_[i].is_dst = (Decode8(bp++) != 0);
-    transition_types_[i].abbr_index = Decode8(bp++);
+    transition_types_[i].abbr_index = (uint_least8_t)Decode8(bp++);
     if (transition_types_[i].abbr_index >= hdr.charcnt) return false;
   }
 
@@ -759,7 +759,7 @@ bool TimeZoneInfo::Load(ZoneInfoSource* zip) {
   if (transitions_.empty() || transitions_.front().unix_time >= 0) {
     Transition& tr(*transitions_.emplace(transitions_.begin()));
     tr.unix_time = -(1LL << 59);  // -18267312070-10-26T17:01:52+00:00
-    tr.type_index = default_transition_type_;
+    tr.type_index = (uint_least8_t)default_transition_type_;
   }
 
   // Extend the transitions using the future specification.
@@ -774,7 +774,7 @@ bool TimeZoneInfo::Load(ZoneInfoSource* zip) {
     const std::uint_fast8_t type_index = last.type_index;
     Transition& tr(*transitions_.emplace(transitions_.end()));
     tr.unix_time = 2147483647;  // 2038-01-19T03:14:07+00:00
-    tr.type_index = type_index;
+    tr.type_index = (uint_least8_t)type_index;
   }
 
   // Compute the local civil time for each transition and the preceding
