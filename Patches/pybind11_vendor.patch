diff --git a/CMakeLists.txt b/CMakeLists.txt
index 309a628..042caad 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -73,8 +73,10 @@ macro(build_pybind11)
     # the internal pybind11 variable to be called PYBIND11_DEBUG, which avoids
     # the issue.
     PATCH_COMMAND
-      ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> git apply -p1 --ignore-space-change --whitespace=nowarn
+      COMMAND ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> git apply -p1 --ignore-space-change --whitespace=nowarn
         ${CMAKE_CURRENT_SOURCE_DIR}/pybind11-2.9.1-fix-windows-debug.patch
+      COMMAND ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> git apply -p1 --ignore-space-change --whitespace=nowarn
+        ${CMAKE_CURRENT_SOURCE_DIR}/pybind11-python3.11-compatibility.patch
   )
 
   # The external project will install to the build folder, but we'll install that on make install.
diff --git a/pybind11-python3.11-compatibility.patch b/pybind11-python3.11-compatibility.patch
new file mode 100644
index 0000000..052df4c
--- /dev/null
+++ b/pybind11-python3.11-compatibility.patch
@@ -0,0 +1,72 @@
+diff --git a/include/pybind11/detail/type_caster_base.h b/include/pybind11/detail/type_caster_base.h
+index 48e218b2..4070f4c0 100644
+--- a/include/pybind11/detail/type_caster_base.h
++++ b/include/pybind11/detail/type_caster_base.h
+@@ -466,21 +466,28 @@ PYBIND11_NOINLINE std::string error_string() {
+             trace = trace->tb_next;
+ 
+         PyFrameObject *frame = trace->tb_frame;
++        Py_XINCREF(frame);
+         errorString += "\n\nAt:\n";
+         while (frame) {
+-#if PY_VERSION_HEX >= 0x03090000
++#    if PY_VERSION_HEX >= 0x030900B1
+             PyCodeObject *f_code = PyFrame_GetCode(frame);
+ #else
+             PyCodeObject *f_code = frame->f_code;
+             Py_INCREF(f_code);
+ #endif
+             int lineno = PyFrame_GetLineNumber(frame);
+-            errorString +=
+-                "  " + handle(f_code->co_filename).cast<std::string>() +
+-                "(" + std::to_string(lineno) + "): " +
+-                handle(f_code->co_name).cast<std::string>() + "\n";
+-            frame = frame->f_back;
++            errorString += "  " + handle(f_code->co_filename).cast<std::string>() + "("
++                           + std::to_string(lineno)
++                           + "): " + handle(f_code->co_name).cast<std::string>() + "\n";
+             Py_DECREF(f_code);
++#    if PY_VERSION_HEX >= 0x030900B1
++            auto *b_frame = PyFrame_GetBack(frame);
++#    else
++            auto *b_frame = frame->f_back;
++            Py_XINCREF(b_frame);
++#    endif
++            Py_DECREF(frame);
++            frame = b_frame;
+         }
+     }
+ #endif
+diff --git a/include/pybind11/pybind11.h b/include/pybind11/pybind11.h
+index 7aa93bb5..d6bdda70 100644
+--- a/include/pybind11/pybind11.h
++++ b/include/pybind11/pybind11.h
+@@ -2384,20 +2384,19 @@ inline function get_type_override(const void *this_ptr, const type_info *this_ty
+ 
+     /* Don't call dispatch code if invoked from overridden function.
+        Unfortunately this doesn't work on PyPy. */
+-#if !defined(PYPY_VERSION) && PY_VERSION_HEX < 0x030B0000
+-    // TODO: Remove PyPy workaround for Python 3.11.
+-    // Current API fails on 3.11 since co_varnames can be null.
+-#if PY_VERSION_HEX >= 0x03090000
++#if !defined(PYPY_VERSION)
++#    if PY_VERSION_HEX >= 0x03090000
+     PyFrameObject *frame = PyThreadState_GetFrame(PyThreadState_Get());
+     if (frame != nullptr) {
+         PyCodeObject *f_code = PyFrame_GetCode(frame);
+         // f_code is guaranteed to not be NULL
+         if ((std::string) str(f_code->co_name) == name && f_code->co_argcount > 0) {
+-            PyObject* locals = PyEval_GetLocals();
+-            if (locals != nullptr && f_code->co_varnames != nullptr) {
+-                PyObject *self_caller = dict_getitem(
+-                    locals, PyTuple_GET_ITEM(f_code->co_varnames, 0)
+-                );
++            PyObject *locals = PyEval_GetLocals();
++            if (locals != nullptr) {
++                PyObject *co_varnames = PyObject_GetAttrString((PyObject *) f_code, "co_varnames");
++                PyObject *self_arg = PyTuple_GET_ITEM(co_varnames, 0);
++                Py_DECREF(co_varnames);
++                PyObject *self_caller = dict_getitem(locals, self_arg);
+                 if (self_caller == self.ptr()) {
+                     Py_DECREF(f_code);
+                     Py_DECREF(frame);
