diff --git a/geometry2/package.xml b/geometry2/package.xml
index 5d32c060..c0d88090 100644
--- a/geometry2/package.xml
+++ b/geometry2/package.xml
@@ -18,7 +18,6 @@
   <buildtool_depend>ament_cmake</buildtool_depend>
 
   <exec_depend>tf2</exec_depend>
-  <exec_depend>tf2_bullet</exec_depend>
   <exec_depend>tf2_eigen</exec_depend>
   <exec_depend>tf2_eigen_kdl</exec_depend>
   <exec_depend>tf2_geometry_msgs</exec_depend>
diff --git a/tf2/src/buffer_core.cpp b/tf2/src/buffer_core.cpp
index c8c994e3..0402ead4 100644
--- a/tf2/src/buffer_core.cpp
+++ b/tf2/src/buffer_core.cpp
@@ -192,7 +192,7 @@ bool BufferCore::setTransform(
       std::chrono::seconds(
         transform.header.stamp.sec)));
   return setTransformImpl(
-    tf2_transform, transform.header.frame_id, transform.child_frame_id,
+    tf2_transform, transform.header.frame_id.c_str(), transform.child_frame_id.c_str(),
     time_point, authority, is_static);
 }
 
@@ -588,8 +588,8 @@ BufferCore::lookupTransform(
     time_out.time_since_epoch());
   msg.header.stamp.sec = static_cast<int32_t>(s.count());
   msg.header.stamp.nanosec = static_cast<uint32_t>(ns.count() % 1000000000ull);
-  msg.header.frame_id = target_frame;
-  msg.child_frame_id = source_frame;
+  msg.header.frame_id = target_frame.c_str();
+  msg.child_frame_id = source_frame.c_str();
 
   return msg;
 }
@@ -619,8 +619,8 @@ BufferCore::lookupTransform(
     time_out.time_since_epoch());
   msg.header.stamp.sec = static_cast<int32_t>(s.count());
   msg.header.stamp.nanosec = static_cast<uint32_t>(ns.count() % 1000000000ull);
-  msg.header.frame_id = target_frame;
-  msg.child_frame_id = source_frame;
+  msg.header.frame_id = target_frame.c_str();
+  msg.child_frame_id = source_frame.c_str();
 
   return msg;
 }
diff --git a/tf2_bullet/CHANGELOG.rst b/tf2_bullet/CHANGELOG.rst
deleted file mode 100644
index 3baf2675..00000000
--- a/tf2_bullet/CHANGELOG.rst
+++ /dev/null
@@ -1,242 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package tf2_bullet
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.25.7 (2024-05-29)
--------------------
-
-0.25.6 (2024-02-16)
--------------------
-
-0.25.5 (2023-11-13)
--------------------
-
-0.25.4 (2023-09-19)
--------------------
-
-0.25.3 (2023-07-17)
--------------------
-
-0.25.2 (2023-01-10)
--------------------
-
-0.25.1 (2022-08-05)
--------------------
-
-0.25.0 (2022-04-05)
--------------------
-* Install includes to include/${PROJECT_NAME} and use modern CMake (`#493 <https://github.com/ros2/geometry2/issues/493>`_)
-* Contributors: Shane Loretz
-
-0.24.0 (2022-03-31)
--------------------
-* Export a tf2_bullet::tf2_bullet target (`#495 <https://github.com/ros2/geometry2/issues/495>`_)
-* Contributors: Shane Loretz
-
-0.23.0 (2022-03-28)
--------------------
-
-0.22.0 (2022-03-01)
--------------------
-
-0.21.0 (2022-01-14)
--------------------
-* Fix cpplint errors (`#497 <https://github.com/ros2/geometry2/issues/497>`_)
-* Contributors: Jacob Perron
-
-0.20.0 (2021-12-17)
--------------------
-
-0.19.0 (2021-10-15)
--------------------
-* Remove some references to the ROS 1 wiki.
-* Contributors: Chris Lalancette
-
-0.18.0 (2021-06-01)
--------------------
-* Fix tf2_bullet dependency export (`#428 <https://github.com/ros2/geometry2/issues/428>`_)
-* Deprecate tf2_bullet.h (`#412 <https://github.com/ros2/geometry2/issues/412>`_)
-* Contributors: Bjar Ne, Chris Lalancette
-
-0.17.1 (2021-04-06)
--------------------
-
-0.17.0 (2021-03-19)
--------------------
-
-0.16.0 (2021-01-25)
--------------------
-
-0.15.1 (2020-12-08)
--------------------
-
-0.15.0 (2020-11-02)
--------------------
-* Update maintainers of the ros2/geometry2 fork. (`#328 <https://github.com/ros2/geometry2/issues/328>`_)
-* Contributors: Chris Lalancette
-
-0.14.1 (2020-09-21)
--------------------
-* Activate usual compiler warnings and fix errors (`#270 <https://github.com/ros2/geometry2/issues/270>`_)
-* Contributors: Ivan Santiago Paunovic
-
-0.14.0 (2020-08-14)
--------------------
-* Suppress compiler warning on Centos (`#290 <https://github.com/ros2/geometry2/issues/290>`_)
-* Contributors: Michael Carroll
-
-0.13.4 (2020-06-03)
--------------------
-
-0.13.3 (2020-05-26)
--------------------
-
-0.13.2 (2020-05-18)
--------------------
-
-0.13.1 (2020-05-08)
--------------------
-
-0.13.0 (2020-04-30)
--------------------
-* Added doxyfiles and sphinx Makefiles (`#257 <https://github.com/ros2/geometry2/issues/257>`_)
-* Porting tf2_bullet to ros2 (`#205 <https://github.com/ros2/geometry2/issues/205>`_)
-* Contributors: Alejandro Hern√°ndez Cordero
-
-0.5.15 (2017-01-24)
--------------------
-
-0.5.14 (2017-01-16)
--------------------
-* Improve documentation
-* Contributors: Jackie Kay
-
-0.5.13 (2016-03-04)
--------------------
-* Don't export catkin includes
-  They only point to the temporary include in the build directory.
-* Contributors: Jochen Sprickerhof
-
-0.5.12 (2015-08-05)
--------------------
-
-0.5.11 (2015-04-22)
--------------------
-
-0.5.10 (2015-04-21)
--------------------
-
-0.5.9 (2015-03-25)
-------------------
-
-0.5.8 (2015-03-17)
-------------------
-* remove useless Makefile files
-* fix ODR violations
-* Contributors: Vincent Rabaud
-
-0.5.7 (2014-12-23)
-------------------
-* fixing install rules and adding backwards compatible include with #warning
-* Contributors: Tully Foote
-
-0.5.6 (2014-09-18)
-------------------
-
-0.5.5 (2014-06-23)
-------------------
-
-0.5.4 (2014-05-07)
-------------------
-
-0.5.3 (2014-02-21)
-------------------
-
-0.5.2 (2014-02-20)
-------------------
-
-0.5.1 (2014-02-14)
-------------------
-
-0.5.0 (2014-02-14)
-------------------
-
-0.4.10 (2013-12-26)
--------------------
-
-0.4.9 (2013-11-06)
-------------------
-* adding missing buildtool dependency on pkg-config
-
-0.4.8 (2013-11-06)
-------------------
-
-0.4.7 (2013-08-28)
-------------------
-
-0.4.6 (2013-08-28)
-------------------
-
-0.4.5 (2013-07-11)
-------------------
-
-0.4.4 (2013-07-09)
-------------------
-* making repo use CATKIN_ENABLE_TESTING correctly and switching rostest to be a test_depend with that change.
-
-0.4.3 (2013-07-05)
-------------------
-
-0.4.2 (2013-07-05)
-------------------
-* removing unused dependency on rostest
-
-0.4.1 (2013-07-05)
-------------------
-* stripping tf2_ros dependency from tf2_bullet.  Test was moved to test_tf2
-
-0.4.0 (2013-06-27)
-------------------
-* moving convert methods back into tf2 because it does not have any ros dependencies beyond ros::Time which is already a dependency of tf2
-* Cleaning up unnecessary dependency on roscpp
-* converting contents of tf2_ros to be properly namespaced in the tf2_ros namespace
-* Cleaning up packaging of tf2 including:
-  removing unused nodehandle
-  cleaning up a few dependencies and linking
-  removing old backup of package.xml
-  making diff minimally different from tf version of library
-* Restoring test packages and bullet packages.
-  reverting 3570e8c42f9b394ecbfd9db076b920b41300ad55 to get back more of the packages previously implemented
-  reverting 04cf29d1b58c660fdc999ab83563a5d4b76ab331 to fix `#7 <https://github.com/ros/geometry_experimental/issues/7>`_
-
-0.3.6 (2013-03-03)
-------------------
-
-0.3.5 (2013-02-15 14:46)
-------------------------
-
-0.3.4 (2013-02-15 13:14)
-------------------------
-
-0.3.3 (2013-02-15 11:30)
-------------------------
-
-0.3.2 (2013-02-15 00:42)
-------------------------
-
-0.3.1 (2013-02-14)
-------------------
-
-0.3.0 (2013-02-13)
-------------------
-* fixing groovy-devel
-* removing bullet and kdl related packages
-* catkinizing geometry-experimental
-* catkinizing tf2_bullet
-* merge tf2_cpp and tf2_py into tf2_ros
-* A working first version of transforming and converting between different types
-* Fixing tests now that Buffer creates a NodeHandle
-* add frame unit tests to kdl and bullet
-* add first regression tests for kdl and bullet tf
-* add btTransform transform
-* add bullet transforms, and create tests for bullet and kdl
diff --git a/tf2_bullet/CMakeLists.txt b/tf2_bullet/CMakeLists.txt
deleted file mode 100644
index e83e1abd..00000000
--- a/tf2_bullet/CMakeLists.txt
+++ /dev/null
@@ -1,51 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-project(tf2_bullet)
-
-# Default to C14
-if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 14)
-endif()
-
-if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  add_compile_options(-Wall -Wextra -Wpedantic -Wnon-virtual-dtor -Woverloaded-virtual)
-endif()
-
-
-find_package(ament_cmake REQUIRED)
-find_package(geometry_msgs REQUIRED)
-find_package(tf2 REQUIRED)
-find_package(tf2_ros REQUIRED)
-
-include(bullet-extras.cmake)
-
-add_library(tf2_bullet INTERFACE)
-target_include_directories(tf2_bullet INTERFACE
-  "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
-  "$<INSTALL_INTERFACE:include/${PROJECT_NAME}>")
-target_link_libraries(tf2_bullet INTERFACE
-  tf2_bullet::Bullet
-  tf2::tf2
-  ${geometry_msgs_TARGETS}
-  tf2_ros::tf2_ros)
-
-install(TARGETS tf2_bullet EXPORT export_tf2_bullet)
-
-install(DIRECTORY include/ DESTINATION include/${PROJECT_NAME})
-
-if(BUILD_TESTING)
-  find_package(ament_lint_auto REQUIRED)
-  find_package(ament_cmake_cppcheck REQUIRED)
-  list(APPEND AMENT_LINT_AUTO_EXCLUDE
-    ament_cmake_cppcheck
-  )
-  ament_lint_auto_find_test_dependencies()
-  ament_cppcheck(LANGUAGE c++)
-
-  find_package(ament_cmake_gtest REQUIRED)
-  ament_add_gtest(test_bullet test/test_tf2_bullet.cpp)
-  target_link_libraries(test_bullet tf2_bullet)
-endif()
-
-ament_export_targets(export_tf2_bullet)
-
-ament_package(CONFIG_EXTRAS bullet-extras.cmake)
diff --git a/tf2_bullet/Doxyfile b/tf2_bullet/Doxyfile
deleted file mode 100644
index abada890..00000000
--- a/tf2_bullet/Doxyfile
+++ /dev/null
@@ -1,27 +0,0 @@
-# All settings not listed here will use the Doxygen default values.
-
-PROJECT_NAME           = "tf2_bullet"
-PROJECT_NUMBER         = master
-PROJECT_BRIEF          = "Bullet binding for tf2."
-
-INPUT                  = ./include mainpage.dox
-RECURSIVE              = YES
-OUTPUT_DIRECTORY       = doc_output
-
-EXTRACT_ALL            = YES
-SORT_MEMBER_DOCS       = NO
-
-GENERATE_LATEX         = NO
-
-ENABLE_PREPROCESSING   = YES
-MACRO_EXPANSION        = YES
-EXPAND_ONLY_PREDEF     = YES
-PREDEFINED             += TF2_PUBLIC=
-
-# Tag files that do not exist will produce a warning and cross-project linking will not work.
-TAGFILES += "../../../../doxygen_tag_files/cppreference-doxygen-web.tag.xml=http://en.cppreference.com/w/"
-# Consider changing "latest" to the version you want to reference (e.g. beta1 or 1.0.0)
-TAGFILES += "../../../../doxygen_tag_files/rcutils.tag=http://docs.ros2.org/latest/api/rcutils/"
-TAGFILES += "../../../../doxygen_tag_files/tf2.tag=http://docs.ros2.org/latest/api/tf2/"
-TAGFILES += "../../../../doxygen_tag_files/tf2_ros.tag=http://docs.ros2.org/latest/api/tf2_ros/"
-GENERATE_TAGFILE = "../../../../doxygen_tag_files/tf2_bullet.tag"
diff --git a/tf2_bullet/bullet-extras.cmake b/tf2_bullet/bullet-extras.cmake
deleted file mode 100644
index 03c77e30..00000000
--- a/tf2_bullet/bullet-extras.cmake
+++ /dev/null
@@ -1,40 +0,0 @@
-# Copyright 2021 Open Source Robotics Foundation, Inc.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are met:
-#
-#    * Redistributions of source code must retain the above copyright
-#      notice, this list of conditions and the following disclaimer.
-#
-#    * Redistributions in binary form must reproduce the above copyright
-#      notice, this list of conditions and the following disclaimer in the
-#      documentation and/or other materials provided with the distribution.
-#
-#    * Neither the name of the Open Source Robotics Foundation, Inc. nor the names of its
-#      contributors may be used to endorse or promote products derived from
-#      this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-# POSSIBILITY OF SUCH DAMAGE.
-
-# Bullet CMake only exports old-style CMake variables.
-# This script makes an imported target for them.
-
-if(WIN32)
-  set(BULLET_ROOT $ENV{ChocolateyInstall}/lib/bullet)
-endif()
-find_package(Bullet REQUIRED)
-
-add_library(tf2_bullet::Bullet INTERFACE IMPORTED)
-target_include_directories(tf2_bullet::Bullet INTERFACE ${BULLET_INCLUDE_DIRS})
-target_link_libraries(tf2_bullet::Bullet INTERFACE ${BULLET_LIBRARIES})
-target_compile_definitions(tf2_bullet::Bullet INTERFACE ${BULLET_DEFINITIONS})
diff --git a/tf2_bullet/include/tf2_bullet/tf2_bullet.h b/tf2_bullet/include/tf2_bullet/tf2_bullet.h
deleted file mode 100644
index 99a5f9bd..00000000
--- a/tf2_bullet/include/tf2_bullet/tf2_bullet.h
+++ /dev/null
@@ -1,38 +0,0 @@
-// Copyright 2008 Willow Garage, Inc.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//    * Redistributions of source code must retain the above copyright
-//      notice, this list of conditions and the following disclaimer.
-//
-//    * Redistributions in binary form must reproduce the above copyright
-//      notice, this list of conditions and the following disclaimer in the
-//      documentation and/or other materials provided with the distribution.
-//
-//    * Neither the name of the Willow Garage, Inc. nor the names of its
-//      contributors may be used to endorse or promote products derived from
-//      this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-// POSSIBILITY OF SUCH DAMAGE.
-
-/** \author Wim Meeussen */
-
-#ifndef TF2_BULLET__TF2_BULLET_H_
-#define TF2_BULLET__TF2_BULLET_H_
-
-#warning This header is obsolete, please include tf2_bullet/tf2_bullet.hpp instead
-
-#include <tf2_bullet/tf2_bullet.hpp>
-
-#endif  // TF2_BULLET__TF2_BULLET_H_
diff --git a/tf2_bullet/include/tf2_bullet/tf2_bullet.hpp b/tf2_bullet/include/tf2_bullet/tf2_bullet.hpp
deleted file mode 100644
index 061e076f..00000000
--- a/tf2_bullet/include/tf2_bullet/tf2_bullet.hpp
+++ /dev/null
@@ -1,146 +0,0 @@
-// Copyright 2008 Willow Garage, Inc.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//    * Redistributions of source code must retain the above copyright
-//      notice, this list of conditions and the following disclaimer.
-//
-//    * Redistributions in binary form must reproduce the above copyright
-//      notice, this list of conditions and the following disclaimer in the
-//      documentation and/or other materials provided with the distribution.
-//
-//    * Neither the name of the Willow Garage, Inc. nor the names of its
-//      contributors may be used to endorse or promote products derived from
-//      this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-// POSSIBILITY OF SUCH DAMAGE.
-
-/** \author Wim Meeussen */
-
-#ifndef TF2_BULLET__TF2_BULLET_HPP_
-#define TF2_BULLET__TF2_BULLET_HPP_
-
-#include <iostream>
-
-#include "tf2/convert.h"
-#include "LinearMath/btQuaternion.h"
-#include "LinearMath/btScalar.h"
-#include "LinearMath/btTransform.h"
-#include "geometry_msgs/msg/point_stamped.hpp"
-#include "tf2_ros/buffer_interface.h"
-
-#if (BT_BULLET_VERSION <= 282)
-// Suppress compilation warning on older versions of Bullet.
-// TODO(mjcarroll): Remove this when all platforms have the fix upstream.
-inline int bullet_btInfinityMask()
-{
-  return btInfinityMask;
-}
-#endif
-
-namespace tf2
-{
-/** \brief Convert a timestamped transform to the equivalent Bullet data type.
- * \param t The transform to convert, as a geometry_msgs TransformedStamped message.
- * \return The transform message converted to a Bullet btTransform.
- */
-inline
-btTransform transformToBullet(const geometry_msgs::msg::TransformStamped & t)
-{
-  return btTransform(
-    btQuaternion(
-      static_cast<float>(t.transform.rotation.x),
-      static_cast<float>(t.transform.rotation.y),
-      static_cast<float>(t.transform.rotation.z),
-      static_cast<float>(t.transform.rotation.w)),
-    btVector3(
-      static_cast<float>(t.transform.translation.x),
-      static_cast<float>(t.transform.translation.y),
-      static_cast<float>(t.transform.translation.z)));
-}
-
-
-/** \brief Apply a geometry_msgs TransformStamped to a Bullet-specific Vector3 type.
- * This function is a specialization of the doTransform template defined in tf2/convert.h
- * \param t_in The vector to transform, as a timestamped Bullet btVector3 data type.
- * \param t_out The transformed vector, as a timestamped Bullet btVector3 data type.
- * \param transform The timestamped transform to apply, as a TransformStamped message.
- */
-template< >
-inline
-void doTransform(
-  const tf2::Stamped<btVector3> & t_in, tf2::Stamped<btVector3> & t_out,
-  const geometry_msgs::msg::TransformStamped & transform)
-{
-  t_out =
-    tf2::Stamped<btVector3>(
-    transformToBullet(transform) * t_in,
-    tf2_ros::fromMsg(transform.header.stamp), transform.header.frame_id);
-}
-
-/** \brief Convert a stamped Bullet Vector3 type to a PointStamped message.
- * This function is a specialization of the toMsg template defined in tf2/convert.h
- * \param in The timestamped Bullet btVector3 to convert.
- * \return The vector converted to a PointStamped message.
- */
-inline
-geometry_msgs::msg::PointStamped toMsg(const tf2::Stamped<btVector3> & in)
-{
-  geometry_msgs::msg::PointStamped msg;
-  msg.header.stamp = tf2_ros::toMsg(in.stamp_);
-  msg.header.frame_id = in.frame_id_;
-  msg.point.x = in[0];
-  msg.point.y = in[1];
-  msg.point.z = in[2];
-  return msg;
-}
-
-/** \brief Convert a PointStamped message type to a stamped Bullet-specific Vector3 type.
- * This function is a specialization of the fromMsg template defined in tf2/convert.h
- * \param msg The PointStamped message to convert.
- * \param out The point converted to a timestamped Bullet Vector3.
- */
-inline
-void fromMsg(const geometry_msgs::msg::PointStamped & msg, tf2::Stamped<btVector3> & out)
-{
-  out.stamp_ = tf2_ros::fromMsg(msg.header.stamp);
-  out.frame_id_ = msg.header.frame_id;
-  out[0] = static_cast<float>(msg.point.x);
-  out[1] = static_cast<float>(msg.point.y);
-  out[2] = static_cast<float>(msg.point.z);
-}
-
-
-/** \brief Apply a geometry_msgs TransformStamped to a Bullet-specific Transform data type.
- * This function is a specialization of the doTransform template defined in tf2/convert.h
- * \param t_in The frame to transform, as a timestamped Bullet btTransform.
- * \param t_out The transformed frame, as a timestamped Bullet btTransform.
- * \param transform The timestamped transform to apply, as a TransformStamped message.
- */
-template< >
-inline
-void doTransform(
-  const tf2::Stamped<btTransform> & t_in, tf2::Stamped<btTransform> & t_out,
-  const geometry_msgs::msg::TransformStamped & transform)
-{
-  t_out =
-    tf2::Stamped<btTransform>(
-    transformToBullet(transform) * t_in,
-    tf2_ros::fromMsg(transform.header.stamp), transform.header.frame_id);
-}
-
-
-}  // namespace tf2
-
-#endif  // TF2_BULLET__TF2_BULLET_HPP_
diff --git a/tf2_bullet/mainpage.dox b/tf2_bullet/mainpage.dox
deleted file mode 100644
index 2438d298..00000000
--- a/tf2_bullet/mainpage.dox
+++ /dev/null
@@ -1,16 +0,0 @@
-/**
-\mainpage
-\htmlinclude manifest.html
-
-\b tf2_bullet contains functions for converting between geometry_msgs and Bullet data types.
-
-This library is an implementation of the templated conversion interface specified in tf/convert.h.
-It enables easy conversion from geometry_msgs Transform and Point types to the types specified
-by the Bullet physics engine API (see http://bulletphysics.org).
-
-\section codeapi Code API
-
-This library consists of one header only, tf2_bullet/tf2_bullet.hpp, which consists mostly of
-specializations of template functions defined in tf2/convert.h.
-
-*/
diff --git a/tf2_bullet/package.xml b/tf2_bullet/package.xml
deleted file mode 100644
index 14dcbbe9..00000000
--- a/tf2_bullet/package.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<package format="2">
-  <name>tf2_bullet</name>
-  <version>0.25.7</version>
-  <description>
-    tf2_bullet
-  </description>
-  <maintainer email="clalancette@openrobotics.org">Chris Lalancette</maintainer>
-  <maintainer email="alejandro@openrobotics.org">Alejandro Hernandez Cordero</maintainer>
-  <license>BSD</license>
-  <url type="website">http://www.ros.org/wiki/tf2_bullet</url>
-  <author email="tfoote@osrfoundation.org">Tully Foote</author>
-  <author>Wim Meeussen</author>
-
-  <buildtool_depend>ament_cmake</buildtool_depend>
-
-  <build_depend>bullet</build_depend>
-  <build_depend>geometry_msgs</build_depend>
-  <build_depend>tf2</build_depend>
-  <build_depend>tf2_ros</build_depend>
-
-  <exec_depend>bullet</exec_depend>
-  <exec_depend>geometry_msgs</exec_depend>
-  <exec_depend>tf2</exec_depend>
-  <exec_depend>tf2_ros</exec_depend>
-
-  <test_depend>ament_cmake_gtest</test_depend>
-  <test_depend>ament_lint_auto</test_depend>
-  <test_depend>ament_lint_common</test_depend>
-
-  <export>
-    <build_type>ament_cmake</build_type>
-  </export>
-
-</package>
diff --git a/tf2_bullet/test/test_tf2_bullet.cpp b/tf2_bullet/test/test_tf2_bullet.cpp
deleted file mode 100644
index 9678d8b2..00000000
--- a/tf2_bullet/test/test_tf2_bullet.cpp
+++ /dev/null
@@ -1,59 +0,0 @@
-// Copyright 2008 Willow Garage, Inc.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//    * Redistributions of source code must retain the above copyright
-//      notice, this list of conditions and the following disclaimer.
-//
-//    * Redistributions in binary form must reproduce the above copyright
-//      notice, this list of conditions and the following disclaimer in the
-//      documentation and/or other materials provided with the distribution.
-//
-//    * Neither the name of the Willow Garage, Inc. nor the names of its
-//      contributors may be used to endorse or promote products derived from
-//      this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-// POSSIBILITY OF SUCH DAMAGE.
-
-/** \author Wim Meeussen */
-
-#include "tf2_bullet/tf2_bullet.hpp"
-#include "rclcpp/rclcpp.hpp"
-#include "gtest/gtest.h"
-#include "tf2/convert.h"
-
-TEST(TfBullet, ConvertVector)
-{
-  btVector3 v(1, 2, 3);
-
-  btVector3 v1 = v;
-  tf2::convert(v1, v1);
-
-  EXPECT_EQ(v, v1);
-
-  btVector3 v2(3, 4, 5);
-  tf2::convert(v1, v2);
-
-  EXPECT_EQ(v, v2);
-  EXPECT_EQ(v1, v2);
-}
-
-
-int main(int argc, char ** argv)
-{
-  testing::InitGoogleTest(&argc, argv);
-
-  int ret = RUN_ALL_TESTS();
-  return ret;
-}
diff --git a/tf2_py/src/tf2_py.cpp b/tf2_py/src/tf2_py.cpp
index 7696f705..c508698e 100644
--- a/tf2_py/src/tf2_py.cpp
+++ b/tf2_py/src/tf2_py.cpp
@@ -188,7 +188,7 @@ static PyObject * transform_converter(const geometry_msgs::msg::TransformStamped
     goto cleanup;
   }
 
-  pframe_id = stringToPython(transform->header.frame_id);
+  pframe_id = stringToPython(transform->header.frame_id.c_str());
   if (!pframe_id) {
     goto cleanup;
   }
@@ -209,7 +209,7 @@ static PyObject * transform_converter(const geometry_msgs::msg::TransformStamped
     goto cleanup;
   }
 
-  child_frame_id = stringToPython(transform->child_frame_id);
+  child_frame_id = stringToPython(transform->child_frame_id.c_str());
   if (!child_frame_id) {
     goto cleanup;
   }
@@ -806,13 +806,13 @@ static PyObject * setTransform(PyObject * self, PyObject * args)
     goto cleanup;
   }
 
-  transform.header.frame_id = stringFromPython(frame_id);
+  transform.header.frame_id = stringFromPython(frame_id).c_str();
 
   if (rostime_converter(stamp, &time) != 1) {
     goto cleanup;
   }
 
-  transform.child_frame_id = stringFromPython(child_frame_id);
+  transform.child_frame_id = stringFromPython(child_frame_id).c_str();
 
   transform.header.stamp = toMsg(time);
 
@@ -945,8 +945,8 @@ static PyObject * setTransformStatic(PyObject * self, PyObject * args)
     goto cleanup;
   }
 
-  transform.child_frame_id = stringFromPython(child_frame_id);
-  transform.header.frame_id = stringFromPython(frame_id);
+  transform.child_frame_id = stringFromPython(child_frame_id).c_str();
+  transform.header.frame_id = stringFromPython(frame_id).c_str();
 
   if (rostime_converter(stamp, &time) != 1) {
     goto cleanup;
diff --git a/tf2_ros/CMakeLists.txt b/tf2_ros/CMakeLists.txt
index 7f15ed83..961d7d34 100644
--- a/tf2_ros/CMakeLists.txt
+++ b/tf2_ros/CMakeLists.txt
@@ -2,6 +2,7 @@ cmake_minimum_required(VERSION 3.5)
 project(tf2_ros)
 
 # Default to C++14
+set(CMAKE_CXX_STANDARD 20)
 if(NOT CMAKE_CXX_STANDARD)
   set(CMAKE_CXX_STANDARD 14)
 endif()
diff --git a/tf2_ros/include/tf2_ros/static_transform_broadcaster.h b/tf2_ros/include/tf2_ros/static_transform_broadcaster.h
index 2637ab70..cdb9d0e3 100644
--- a/tf2_ros/include/tf2_ros/static_transform_broadcaster.h
+++ b/tf2_ros/include/tf2_ros/static_transform_broadcaster.h
@@ -54,7 +54,7 @@ class StaticTransformBroadcaster
 {
 public:
   /** \brief Node interface constructor */
-  template<class NodeT, class AllocatorT = std::allocator<void>>
+  template<class NodeT, class AllocatorT = std::pmr::polymorphic_allocator<void>>
   StaticTransformBroadcaster(
     NodeT && node,
     const rclcpp::QoS & qos = StaticBroadcasterQoS(),
diff --git a/tf2_ros/include/tf2_ros/transform_broadcaster.h b/tf2_ros/include/tf2_ros/transform_broadcaster.h
index b84af48e..e66f3efa 100644
--- a/tf2_ros/include/tf2_ros/transform_broadcaster.h
+++ b/tf2_ros/include/tf2_ros/transform_broadcaster.h
@@ -54,7 +54,7 @@ class TransformBroadcaster
 {
 public:
   /** \brief Node interface constructor */
-  template<class NodeT, class AllocatorT = std::allocator<void>>
+  template<class NodeT, class AllocatorT = std::pmr::polymorphic_allocator<void>>
   TransformBroadcaster(
     NodeT && node,
     const rclcpp::QoS & qos = DynamicBroadcasterQoS(),
diff --git a/tf2_ros/include/tf2_ros/transform_listener.h b/tf2_ros/include/tf2_ros/transform_listener.h
index 01620a8f..a8c55781 100644
--- a/tf2_ros/include/tf2_ros/transform_listener.h
+++ b/tf2_ros/include/tf2_ros/transform_listener.h
@@ -36,6 +36,25 @@
 #include <memory>
 #include <thread>
 #include <utility>
+#ifdef __linux__
+#include <experimental/memory_resource>
+#include <experimental/vector>
+#include <experimental/string>
+#else
+#include <memory_resource>
+#include <vector>
+#include <string>
+#endif
+
+#ifdef __linux__
+namespace std::pmr
+{
+  using string = std::experimental::pmr::string;
+  template <class _ValueT>
+  using vector = std::experimental::pmr::vector<_ValueT>;
+  using wstring = std::experimental::pmr::wstring;
+}
+#endif
 
 #include "tf2/buffer_core.h"
 #include "tf2/time.h"
@@ -51,7 +70,7 @@ namespace tf2_ros
 
 namespace detail
 {
-template<class AllocatorT = std::allocator<void>>
+template<class AllocatorT = std::pmr::polymorphic_allocator<void>>
 rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>
 get_default_transform_listener_sub_options()
 {
@@ -64,7 +83,7 @@ get_default_transform_listener_sub_options()
   return options;
 }
 
-template<class AllocatorT = std::allocator<void>>
+template<class AllocatorT = std::pmr::polymorphic_allocator<void>>
 rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>
 get_default_transform_listener_static_sub_options()
 {
@@ -86,7 +105,7 @@ public:
   TF2_ROS_PUBLIC
   explicit TransformListener(tf2::BufferCore & buffer, bool spin_thread = true);
 
-  template<class NodeT, class AllocatorT = std::allocator<void>>
+  template<class NodeT, class AllocatorT = std::pmr::polymorphic_allocator<void>>
   TransformListener(
     tf2::BufferCore & buffer,
     NodeT && node,
@@ -106,7 +125,7 @@ public:
   virtual ~TransformListener();
 
 private:
-  template<class NodeT, class AllocatorT = std::allocator<void>>
+  template<class NodeT, class AllocatorT = std::pmr::polymorphic_allocator<void>>
   void init(
     NodeT && node,
     bool spin_thread,
diff --git a/tf2_ros/src/buffer_client.cpp b/tf2_ros/src/buffer_client.cpp
index 32702ab3..98c3a113 100644
--- a/tf2_ros/src/buffer_client.cpp
+++ b/tf2_ros/src/buffer_client.cpp
@@ -150,26 +150,26 @@ geometry_msgs::msg::TransformStamped BufferClient::processResult(
   if (result->error.error != result->error.NO_ERROR) {
     // otherwise, we'll have to throw the appropriate exception
     if (result->error.error == result->error.LOOKUP_ERROR) {
-      throw tf2::LookupException(result->error.error_string);
+      throw tf2::LookupException(result->error.error_string.c_str());
     }
 
     if (result->error.error == result->error.CONNECTIVITY_ERROR) {
-      throw tf2::ConnectivityException(result->error.error_string);
+      throw tf2::ConnectivityException(result->error.error_string.c_str());
     }
 
     if (result->error.error == result->error.EXTRAPOLATION_ERROR) {
-      throw tf2::ExtrapolationException(result->error.error_string);
+      throw tf2::ExtrapolationException(result->error.error_string.c_str());
     }
 
     if (result->error.error == result->error.INVALID_ARGUMENT_ERROR) {
-      throw tf2::InvalidArgumentException(result->error.error_string);
+      throw tf2::InvalidArgumentException(result->error.error_string.c_str());
     }
 
     if (result->error.error == result->error.TIMEOUT_ERROR) {
-      throw tf2::TimeoutException(result->error.error_string);
+      throw tf2::TimeoutException(result->error.error_string.c_str());
     }
 
-    throw tf2::TransformException(result->error.error_string);
+    throw tf2::TransformException(result->error.error_string.c_str());
   }
 
   return result->transform;
diff --git a/tf2_ros/src/buffer_server.cpp b/tf2_ros/src/buffer_server.cpp
index a91de83a..99ecdf52 100644
--- a/tf2_ros/src/buffer_server.cpp
+++ b/tf2_ros/src/buffer_server.cpp
@@ -207,13 +207,13 @@ bool BufferServer::canTransform(GoalHandle gh)
 
   // check whether we need to used the advanced or simple api
   if (!goal->advanced) {
-    return buffer_.canTransform(goal->target_frame, goal->source_frame, source_time_point, nullptr);
+    return buffer_.canTransform(goal->target_frame.c_str(), goal->source_frame.c_str(), source_time_point, nullptr);
   }
 
   tf2::TimePoint target_time_point = tf2_ros::fromMsg(goal->target_time);
   return buffer_.canTransform(
-    goal->target_frame, target_time_point,
-    goal->source_frame, source_time_point, goal->fixed_frame, nullptr);
+    goal->target_frame.c_str(), target_time_point,
+    goal->source_frame.c_str(), source_time_point, goal->fixed_frame.c_str(), nullptr);
 }
 
 geometry_msgs::msg::TransformStamped BufferServer::lookupTransform(GoalHandle gh)
@@ -223,13 +223,13 @@ geometry_msgs::msg::TransformStamped BufferServer::lookupTransform(GoalHandle gh
   // check whether we need to used the advanced or simple api
   if (!goal->advanced) {
     return buffer_.lookupTransform(
-      goal->target_frame, goal->source_frame,
+      goal->target_frame.c_str(), goal->source_frame.c_str(),
       tf2_ros::fromMsg(goal->source_time));
   }
 
   return buffer_.lookupTransform(
-    goal->target_frame, tf2_ros::fromMsg(goal->target_time),
-    goal->source_frame, tf2_ros::fromMsg(goal->source_time), goal->fixed_frame);
+    goal->target_frame.c_str(), tf2_ros::fromMsg(goal->target_time),
+    goal->source_frame.c_str(), tf2_ros::fromMsg(goal->source_time), goal->fixed_frame.c_str());
 }
 
 }  // namespace tf2_ros
diff --git a/tf2_ros/src/tf2_monitor.cpp b/tf2_ros/src/tf2_monitor.cpp
index 936527fa..97ab1cf5 100644
--- a/tf2_ros/src/tf2_monitor.cpp
+++ b/tf2_ros/src/tf2_monitor.cpp
@@ -74,16 +74,16 @@ public:
     double average_offset = 0;
     std::unique_lock<std::mutex> my_lock(map_mutex_);
     for (size_t i = 0; i < message.transforms.size(); i++) {
-      frame_authority_map[message.transforms[i].child_frame_id] = authority;
+      frame_authority_map[message.transforms[i].child_frame_id.c_str()] = authority;
 
       double offset = clock_->now().seconds() - tf2_ros::timeToSec(
         message.transforms[i].header.stamp);
       average_offset += offset;
 
       std::map<std::string, std::vector<double>>::iterator it = delay_map.find(
-        message.transforms[i].child_frame_id);
+        message.transforms[i].child_frame_id.c_str());
       if (it == delay_map.end()) {
-        delay_map[message.transforms[i].child_frame_id] = std::vector<double>(1, offset);
+        delay_map[message.transforms[i].child_frame_id.c_str()] = std::vector<double>(1, offset);
       } else {
         it->second.push_back(offset);
         if (it->second.size() > 1000) {
