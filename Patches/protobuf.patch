diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4137ce2e9..b0d33a074 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -276,6 +276,11 @@ else (MSVC)
   set(LIB_PREFIX)
 endif (MSVC)
 
+if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+  # Clang warning suppressions
+  add_definitions(-Wall -Werror -Wno-deprecated-register -Wno-unused-function -Wno-error=register)
+endif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+
 include_directories(
   ${ZLIB_INCLUDE_DIRECTORIES}
   ${protobuf_BINARY_DIR}
diff --git a/cmake/install.cmake b/cmake/install.cmake
index 998c2e31a..f7ab963f3 100644
--- a/cmake/install.cmake
+++ b/cmake/install.cmake
@@ -43,6 +43,11 @@ foreach(_library ${_protobuf_libraries})
     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${_library}
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${_library}
     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${_library})
+  if(WIN32)
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/${_library}.pdb
+       DESTINATION ${CMAKE_INSTALL_LIBDIR}
+       CONFIGURATIONS Debug)
+  endif()
 endforeach()
 
 if (protobuf_BUILD_PROTOC_BINARIES)
diff --git a/cmake/libprotobuf-lite.cmake b/cmake/libprotobuf-lite.cmake
index f343458cf..990639535 100644
--- a/cmake/libprotobuf-lite.cmake
+++ b/cmake/libprotobuf-lite.cmake
@@ -5,8 +5,7 @@ include(${protobuf_SOURCE_DIR}/cmake/protobuf-configure-target.cmake)
 
 add_library(libprotobuf-lite ${protobuf_SHARED_OR_STATIC}
   ${libprotobuf_lite_srcs}
-  ${libprotobuf_lite_hdrs}
-  ${protobuf_version_rc_file})
+  ${libprotobuf_lite_hdrs})
 if(protobuf_HAVE_LD_VERSION_SCRIPT)
   if(${CMAKE_VERSION} VERSION_GREATER 3.13 OR ${CMAKE_VERSION} VERSION_EQUAL 3.13)
     target_link_options(libprotobuf-lite PRIVATE -Wl,--version-script=${protobuf_SOURCE_DIR}/src/libprotobuf-lite.map)
diff --git a/cmake/libprotobuf.cmake b/cmake/libprotobuf.cmake
index 422754a1a..3657cf3cf 100644
--- a/cmake/libprotobuf.cmake
+++ b/cmake/libprotobuf.cmake
@@ -5,8 +5,7 @@ include(${protobuf_SOURCE_DIR}/cmake/protobuf-configure-target.cmake)
 
 add_library(libprotobuf ${protobuf_SHARED_OR_STATIC}
   ${libprotobuf_srcs}
-  ${libprotobuf_hdrs}
-  ${protobuf_version_rc_file})
+  ${libprotobuf_hdrs})
 if(protobuf_HAVE_LD_VERSION_SCRIPT)
   if(${CMAKE_VERSION} VERSION_GREATER 3.13 OR ${CMAKE_VERSION} VERSION_EQUAL 3.13)
     target_link_options(libprotobuf PRIVATE -Wl,--version-script=${protobuf_SOURCE_DIR}/src/libprotobuf.map)
diff --git a/src/google/protobuf/compiler/importer.cc b/src/google/protobuf/compiler/importer.cc
index 9e68da679..57463f054 100644
--- a/src/google/protobuf/compiler/importer.cc
+++ b/src/google/protobuf/compiler/importer.cc
@@ -393,9 +393,11 @@ DiskSourceTree::DiskFileToVirtualFile(absl::string_view disk_file,
   for (int i = 0; i < mapping_index; i++) {
     if (ApplyMapping(*virtual_file, mappings_[i].virtual_path,
                      mappings_[i].disk_path, shadowing_disk_file)) {
-      if (access(shadowing_disk_file->c_str(), F_OK) >= 0) {
-        // File exists.
-        return SHADOWED;
+        FILE* fp = fopen(shadowing_disk_file->c_str(), "r");
+        if (fp != nullptr) {
+            // File exists.
+            fclose(fp);
+            return SHADOWED;
       }
     }
   }
diff --git a/src/google/protobuf/descriptor.cc b/src/google/protobuf/descriptor.cc
index 5be4ddf37..f9c4f5b0c 100644
--- a/src/google/protobuf/descriptor.cc
+++ b/src/google/protobuf/descriptor.cc
@@ -2121,6 +2121,12 @@ void DescriptorPool::InternalAddGeneratedFile(
 }
 
 
+void DescriptorPool::ResetGeneratedDatabase() {
+  absl::MutexLockMaybe lock(internal_generated_pool()->mutex_);
+  ABSL_CHECK(GeneratedDatabase()->Reset());
+}
+
+
 // Find*By* methods ==================================================
 
 // TODO:  There's a lot of repeated code here, but I'm not sure if
diff --git a/src/google/protobuf/descriptor.h b/src/google/protobuf/descriptor.h
index ff178c31c..dd50f5f84 100644
--- a/src/google/protobuf/descriptor.h
+++ b/src/google/protobuf/descriptor.h
@@ -2327,6 +2327,8 @@ class PROTOBUF_EXPORT DescriptorPool {
   static void InternalAddGeneratedFile(const void* encoded_file_descriptor,
                                        int size);
 
+  static void ResetGeneratedDatabase();
+
   // Disallow [enforce_utf8 = false] in .proto files.
   void DisallowEnforceUtf8() { disallow_enforce_utf8_ = true; }
 
diff --git a/src/google/protobuf/descriptor_database.cc b/src/google/protobuf/descriptor_database.cc
index 9d6464f81..f30ed3e3e 100644
--- a/src/google/protobuf/descriptor_database.cc
+++ b/src/google/protobuf/descriptor_database.cc
@@ -879,6 +879,11 @@ EncodedDescriptorDatabase::~EncodedDescriptorDatabase() {
   }
 }
 
+bool EncodedDescriptorDatabase::Reset() {
+  index_.reset(new DescriptorIndex());
+  return true;
+}
+
 // ===================================================================
 
 DescriptorPoolDatabase::DescriptorPoolDatabase(const DescriptorPool& pool)
diff --git a/src/google/protobuf/descriptor_database.h b/src/google/protobuf/descriptor_database.h
index dfb1bdb50..7f069c877 100644
--- a/src/google/protobuf/descriptor_database.h
+++ b/src/google/protobuf/descriptor_database.h
@@ -270,6 +270,8 @@ class PROTOBUF_EXPORT EncodedDescriptorDatabase : public DescriptorDatabase {
       delete;
   ~EncodedDescriptorDatabase() override;
 
+  bool Reset();
+
   // Adds the FileDescriptorProto to the database.  The descriptor is provided
   // in encoded form.  The database does not make a copy of the bytes, nor
   // does it take ownership; it's up to the caller to make sure the bytes
diff --git a/src/google/protobuf/generated_message_reflection.h b/src/google/protobuf/generated_message_reflection.h
index 1df00c3c1..b72192b51 100644
--- a/src/google/protobuf/generated_message_reflection.h
+++ b/src/google/protobuf/generated_message_reflection.h
@@ -110,7 +110,7 @@ struct ReflectionSchema {
   uint32_t GetObjectSize() const { return static_cast<uint32_t>(object_size_); }
 
   bool InRealOneof(const FieldDescriptor* field) const {
-    return field->real_containing_oneof();
+    return field->real_containing_oneof() != nullptr;
   }
 
   // Offset of a non-oneof field.  Getting a field offset is slightly more
diff --git a/src/google/protobuf/message.cc b/src/google/protobuf/message.cc
index b4b1a40c5..a55c48d6b 100644
--- a/src/google/protobuf/message.cc
+++ b/src/google/protobuf/message.cc
@@ -211,6 +211,8 @@ class GeneratedMessageFactory final : public MessageFactory {
   // implements MessageFactory ---------------------------------------
   const Message* GetPrototype(const Descriptor* type) override;
 
+  void Reset();
+
  private:
   const Message* FindInTypeMap(const Descriptor* type)
       ABSL_SHARED_LOCKS_REQUIRED(mutex_)
@@ -336,12 +338,20 @@ const Message* GeneratedMessageFactory::GetPrototype(const Descriptor* type) {
   return result;
 }
 
+void GeneratedMessageFactory::Reset() {
+  files_.clear();
+}
+
 }  // namespace
 
 MessageFactory* MessageFactory::generated_factory() {
   return GeneratedMessageFactory::singleton();
 }
 
+void MessageFactory::ResetGeneratedFactory() {
+  GeneratedMessageFactory::singleton()->Reset();
+}
+
 void MessageFactory::InternalRegisterGeneratedFile(
     const google::protobuf::internal::DescriptorTable* table) {
   GeneratedMessageFactory::singleton()->RegisterFile(table);
diff --git a/src/google/protobuf/message.h b/src/google/protobuf/message.h
index 1fb5368a2..6e2fbfb66 100644
--- a/src/google/protobuf/message.h
+++ b/src/google/protobuf/message.h
@@ -1325,6 +1325,8 @@ class PROTOBUF_EXPORT MessageFactory {
   // This factory is a singleton.  The caller must not delete the object.
   static MessageFactory* generated_factory();
 
+  static void ResetGeneratedFactory();
+
   // For internal use only:  Registers a .proto file at static initialization
   // time, to be placed in generated_factory.  The first time GetPrototype()
   // is called with a descriptor from this file, |register_messages| will be
diff --git a/src/google/protobuf/port_def.inc b/src/google/protobuf/port_def.inc
index 25abc3039..b8fb09b5a 100644
--- a/src/google/protobuf/port_def.inc
+++ b/src/google/protobuf/port_def.inc
@@ -111,6 +111,8 @@
 // Portable check for gcc-style atomic built-ins
 #if ABSL_HAVE_BUILTIN(__atomic_load_n)
 #define PROTOBUF_BUILTIN_ATOMIC 1
+#else
+#define PROTOBUF_BUILTIN_ATOMIC 0
 #endif
 
 // Portable check for GCC minimum version:
@@ -1039,6 +1041,8 @@ static_assert(PROTOBUF_ABSL_MIN(20230125, 3),
 // effectively but which people turn on anyways.
 #ifdef __clang__
 #pragma clang diagnostic push
+//disabling warnings with newer compilers without breaking builds with older compilers.
+#pragma clang diagnostic ignored "-Wunknown-warning-option"
 // -Wshorten-64-to-32 is a typical pain where we diff pointers.
 //   char* p = strchr(s, '\n');
 //   return p ? p - s : -1;
@@ -1114,7 +1118,7 @@ static_assert(PROTOBUF_ABSL_MIN(20230125, 3),
 #pragma warning(disable: 4125)
 #endif
 
-#if PROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII
+#if defined(PROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII) && PROTOBUF_ENABLE_DEBUG_LOGGING_MAY_LEAK_PII
 #define PROTOBUF_DEBUG true
 #else
 #define PROTOBUF_DEBUG false
diff --git a/src/google/protobuf/stubs/port.h b/src/google/protobuf/stubs/port.h
index 4a38c372f..66df4dd6e 100644
--- a/src/google/protobuf/stubs/port.h
+++ b/src/google/protobuf/stubs/port.h
@@ -63,8 +63,13 @@
 #include <intrin.h>
 #elif defined(__APPLE__)
 #include <libkern/OSByteOrder.h>
-#elif defined(__linux__) || defined(__ANDROID__) || defined(__CYGWIN__)
+#elif defined(__ANDROID__)
 #include <byteswap.h>  // IWYU pragma: export
+#elif defined(__linux__) || defined(__CYGWIN__)
+#include <bits/byteswap.h>
+#define bswap_16(x) __bswap_16 (x)
+#define bswap_32(x) __bswap_32 (x)
+#define bswap_64(x) __bswap_64 (x)
 #endif
 
 // Legacy: some users reference these (internal-only) macros even though we
diff --git a/src/google/protobuf/text_format.h b/src/google/protobuf/text_format.h
index f851c910f..8c9387fbf 100644
--- a/src/google/protobuf/text_format.h
+++ b/src/google/protobuf/text_format.h
@@ -53,7 +53,7 @@ PROTOBUF_EXPORT bool ShouldRedactField(const FieldDescriptor* field);
 // formats. A higher-level API must correspond to a greater number than any
 // lower-level APIs it calls under the hood (e.g kDebugString >
 // kMemberPrintToString > kPrintWithStream).
-PROTOBUF_EXPORT enum class FieldReporterLevel {
+enum class PROTOBUF_EXPORT FieldReporterLevel {
   kNoReport = 0,
   kPrintMessage = 1,
   kPrintWithGenerator = 2,
@@ -76,7 +76,7 @@ class ErrorCollector;  // tokenizer.h
 
 namespace internal {
 // Enum used to set printing options for StringifyMessage.
-PROTOBUF_EXPORT enum class Option;
+enum class PROTOBUF_EXPORT Option;
 
 // Converts a protobuf message to a string with redaction enabled.
 PROTOBUF_EXPORT std::string StringifyMessage(const Message& message,
diff --git a/third_party/utf8_range/CMakeLists.txt b/third_party/utf8_range/CMakeLists.txt
index 344952d38..c22664af3 100644
--- a/third_party/utf8_range/CMakeLists.txt
+++ b/third_party/utf8_range/CMakeLists.txt
@@ -56,7 +56,7 @@ if (utf8_range_ENABLE_INSTALL)
   include(GNUInstallDirs)
 
   install(EXPORT ${PROJECT_NAME}-targets
-    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+    DESTINATION "${CMAKE_INSTALL_CMAKEDIR}"
     NAMESPACE utf8_range::
   )
   install(TARGETS utf8_validity utf8_range EXPORT ${PROJECT_NAME}-targets
@@ -68,10 +68,10 @@ if (utf8_range_ENABLE_INSTALL)
   configure_package_config_file(
     cmake/${PROJECT_NAME}-config.cmake.in
     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
-    INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+    INSTALL_DESTINATION "${CMAKE_INSTALL_CMAKEDIR}"
   )
   install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
-    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+    DESTINATION "${CMAKE_INSTALL_CMAKEDIR}"
   )
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/utf8_range.pc.cmake
                  ${CMAKE_CURRENT_BINARY_DIR}/utf8_range.pc @ONLY)
