diff --git a/rmw_cyclonedds_cpp/CMakeLists.txt b/rmw_cyclonedds_cpp/CMakeLists.txt
index a2a8a02..3f93156 100644
--- a/rmw_cyclonedds_cpp/CMakeLists.txt
+++ b/rmw_cyclonedds_cpp/CMakeLists.txt
@@ -80,6 +80,19 @@ add_library(rmw_cyclonedds_cpp
   src/TypeSupport2.cpp
   src/TypeSupport.cpp)
 
+set_target_properties(rmw_cyclonedds_cpp PROPERTIES
+    COMPILE_PDB_NAME rmw_cyclonedds_cpp
+    COMPILE_PDB_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+    COMPILE_FLAGS "/Zi"
+    LINK_FLAGS "/DEBUG /OPT:REF /OPT:ICF"
+)
+
+target_compile_options(rmw_cyclonedds_cpp PRIVATE $<$<CONFIG:Release>:/Od /Zi>)
+target_link_options(rmw_cyclonedds_cpp PRIVATE $<$<CONFIG:Release>:/DEBUG /OPT:REF /OPT:ICF>)
+
+target_compile_options(rmw_cyclonedds_cpp PRIVATE /Zi)
+target_link_options(rmw_cyclonedds_cpp PRIVATE /DEBUG)
+
 target_link_libraries(rmw_cyclonedds_cpp PRIVATE
   CycloneDDS::ddsc)
 
diff --git a/rmw_cyclonedds_cpp/src/TypeSupport.hpp b/rmw_cyclonedds_cpp/src/TypeSupport.hpp
index be07c9e..1370b95 100644
--- a/rmw_cyclonedds_cpp/src/TypeSupport.hpp
+++ b/rmw_cyclonedds_cpp/src/TypeSupport.hpp
@@ -89,16 +89,16 @@ struct StringHelper<rosidl_typesupport_introspection_c__MessageMembers>
 template<>
 struct StringHelper<rosidl_typesupport_introspection_cpp::MessageMembers>
 {
-  using type = std::string;
+  using type = std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>>;
 
-  static std::string & convert_to_std_string(void * data)
+  static type & convert_to_std_string(void * data)
   {
-    return *(static_cast<std::string *>(data));
+    return *(static_cast<type *>(data));
   }
 
   static void assign(cycdeser & deser, void * field)
   {
-    std::string & str = *(std::string *)field;
+    type & str = *(type *)field;
     deser >> str;
   }
 };
diff --git a/rmw_cyclonedds_cpp/src/TypeSupport2.hpp b/rmw_cyclonedds_cpp/src/TypeSupport2.hpp
index b4b890d..c27bb60 100644
--- a/rmw_cyclonedds_cpp/src/TypeSupport2.hpp
+++ b/rmw_cyclonedds_cpp/src/TypeSupport2.hpp
@@ -17,6 +17,7 @@
 #include <cassert>
 #include <functional>
 #include <memory>
+#include <memory_resource>
 #include <regex>
 #include <string>
 #include <utility>
@@ -437,7 +438,7 @@ public:
 class ROSIDLCPP_StringValueType : public U8StringValueType
 {
 public:
-  using type = std::string;
+  using type = std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>>;
 
   TypedSpan<const char_traits::char_type> data(const void * ptr) const override
   {
diff --git a/rmw_cyclonedds_cpp/src/TypeSupport_impl.hpp b/rmw_cyclonedds_cpp/src/TypeSupport_impl.hpp
index 736e088..a15d2f6 100644
--- a/rmw_cyclonedds_cpp/src/TypeSupport_impl.hpp
+++ b/rmw_cyclonedds_cpp/src/TypeSupport_impl.hpp
@@ -113,39 +113,39 @@ void deserialize_field(
   } else if (member->array_size_ && !member->is_upper_bound_) {
     deser.deserializeA(static_cast<T *>(field), member->array_size_);
   } else {
-    auto & vector = *reinterpret_cast<std::vector<T> *>(field);
+    auto & vector = *reinterpret_cast<std::vector<T, std::pmr::polymorphic_allocator<T>> *>(field);
     deser >> vector;
   }
 }
 
 template<>
-inline void deserialize_field<std::string>(
+inline void deserialize_field<std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>>>(
   const rosidl_typesupport_introspection_cpp::MessageMember * member,
   void * field,
   cycdeser & deser)
 {
   if (!member->is_array_) {
-    deser >> *static_cast<std::string *>(field);
+    deser >> *static_cast<std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>> *>(field);
   } else if (member->array_size_ && !member->is_upper_bound_) {
-    std::string * array = static_cast<std::string *>(field);
+    std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>> * array = static_cast<std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>> *>(field);
     deser.deserializeA(array, member->array_size_);
   } else {
-    auto & vector = *reinterpret_cast<std::vector<std::string> *>(field);
+    auto & vector = *reinterpret_cast<std::vector<std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>>, std::pmr::polymorphic_allocator<std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>>>> *>(field);
     deser >> vector;
   }
 }
 
 template<>
-inline void deserialize_field<std::wstring>(
+inline void deserialize_field<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>>>(
   const rosidl_typesupport_introspection_cpp::MessageMember * member,
   void * field,
   cycdeser & deser)
 {
-  std::wstring wstr;
+  std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> wstr;
   if (!member->is_array_) {
     deser >> wstr;
     wstring_to_u16string(
-      wstr, *static_cast<std::u16string *>(field));
+      wstr, *static_cast<std::basic_string<char16_t, std::char_traits<char16_t>, std::pmr::polymorphic_allocator<char16_t>> *>(field));
   } else {
     uint32_t size;
     if (member->array_size_ && !member->is_upper_bound_) {
@@ -156,7 +156,7 @@ inline void deserialize_field<std::wstring>(
     }
     for (size_t i = 0; i < size; ++i) {
       void * element = member->get_function(field, i);
-      auto u16str = static_cast<std::u16string *>(element);
+      auto u16str = static_cast<std::basic_string<char16_t, std::char_traits<char16_t>, std::pmr::polymorphic_allocator<char16_t>> *>(element);
       deser >> wstr;
       wstring_to_u16string(wstr, *u16str);
     }
@@ -185,7 +185,7 @@ void deserialize_field(
 }
 
 template<>
-inline void deserialize_field<std::string>(
+inline void deserialize_field<std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>>>(
   const rosidl_typesupport_introspection_c__MessageMember * member,
   void * field,
   cycdeser & deser)
@@ -198,7 +198,7 @@ inline void deserialize_field<std::string>(
       auto deser_field = static_cast<rosidl_runtime_c__String *>(field);
       // tmpstring is defined here and not below to avoid
       // memory allocation in every iteration of the for loop
-      std::string tmpstring;
+      std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>> tmpstring;
       for (size_t i = 0; i < member->array_size_; ++i) {
         deser.deserialize(tmpstring);
         if (!rosidl_runtime_c__String__assign(&deser_field[i], tmpstring.c_str())) {
@@ -206,7 +206,7 @@ inline void deserialize_field<std::string>(
         }
       }
     } else {
-      std::vector<std::string> cpp_string_vector;
+      std::vector<std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>>, std::pmr::polymorphic_allocator<std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>>>> cpp_string_vector;
       deser >> cpp_string_vector;
 
       auto & string_array_field = *reinterpret_cast<rosidl_runtime_c__String__Sequence *>(field);
@@ -230,12 +230,12 @@ inline void deserialize_field<std::string>(
 }
 
 template<>
-inline void deserialize_field<std::wstring>(
+inline void deserialize_field<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>>>(
   const rosidl_typesupport_introspection_c__MessageMember * member,
   void * field,
   cycdeser & deser)
 {
-  std::wstring wstr;
+  std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> wstr;
   if (!member->is_array_) {
     deser >> wstr;
     wstring_to_u16string(
@@ -307,10 +307,10 @@ bool TypeSupport<MembersType>::deserializeROSmessage(
         deserialize_field<uint64_t>(member, field, deser);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_STRING:
-        deserialize_field<std::string>(member, field, deser);
+        deserialize_field<std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>>>(member, field, deser);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_WSTRING:
-        deserialize_field<std::wstring>(member, field, deser);
+        deserialize_field<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>>>(member, field, deser);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_MESSAGE:
         {
@@ -412,10 +412,10 @@ bool TypeSupport<MembersType>::printROSmessage(
         {uint64_t dummy; print_field(member, deser, dummy);}
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_STRING:
-        {std::string dummy; print_field(member, deser, dummy);}
+        {std::basic_string<char, std::char_traits<char>, std::pmr::polymorphic_allocator<char>> dummy; print_field(member, deser, dummy);}
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_WSTRING:
-        {std::wstring dummy; print_field(member, deser, dummy);}
+        {std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> dummy; print_field(member, deser, dummy);}
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_MESSAGE:
         {
diff --git a/rmw_cyclonedds_cpp/src/serdes.hpp b/rmw_cyclonedds_cpp/src/serdes.hpp
index 9973572..8c7a80e 100644
--- a/rmw_cyclonedds_cpp/src/serdes.hpp
+++ b/rmw_cyclonedds_cpp/src/serdes.hpp
@@ -110,10 +110,12 @@ public:
   inline cycdeser & operator>>(uint64_t & x) {deserialize(x); return *this;}
   inline cycdeser & operator>>(float & x) {deserialize(x); return *this;}
   inline cycdeser & operator>>(double & x) {deserialize(x); return *this;}
-  inline cycdeser & operator>>(std::string & x) {deserialize(x); return *this;}
-  inline cycdeser & operator>>(std::wstring & x) {deserialize(x); return *this;}
-  template<class T>
-  inline cycdeser & operator>>(std::vector<T> & x) {deserialize(x); return *this;}
+  template<typename Allocator>
+  inline cycdeser & operator>>(std::basic_string<char, std::char_traits<char>, Allocator> & x) {deserialize(x); return *this;}
+  template<typename Allocator>
+  inline cycdeser & operator>>(std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator> & x) {deserialize(x); return *this;}
+  template<typename T, typename Allocator>
+  inline cycdeser & operator>>(std::vector<T, Allocator> & x) {deserialize(x); return *this;}
   template<class T, size_t S>
   inline cycdeser & operator>>(std::array<T, S> & x) {deserialize(x); return *this;}
 
@@ -155,22 +157,24 @@ public:
     validate_size(sz, el_sz);
     return sz;
   }
-  inline void deserialize(std::string & x)
+  template<typename Allocator>
+  inline void deserialize(std::basic_string<char, std::char_traits<char>, Allocator> & x)
   {
     const uint32_t sz = deserialize_len(sizeof(char));
     if (sz == 0) {
-      x = std::string("");
+      x = std::basic_string<char, std::char_traits<char>, Allocator>("");
     } else {
       validate_str(sz);
-      x = std::string(data + pos, sz - 1);
+      x = std::basic_string<char, std::char_traits<char>, Allocator>(data + pos, sz - 1);
     }
     pos += sz;
   }
-  inline void deserialize(std::wstring & x)
+  template<typename Allocator>
+  inline void deserialize(std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator> & x)
   {
     const uint32_t sz = deserialize_len(sizeof(wchar_t));
     // wstring is not null-terminated in cdr
-    x = std::wstring(reinterpret_cast<const wchar_t *>(data + pos), sz);
+    x = std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>(reinterpret_cast<const wchar_t *>(data + pos), sz);
     pos += sz * sizeof(wchar_t);
   }
 
@@ -218,14 +222,15 @@ public:
     for (size_t i = 0; i < cnt; i++) {deserialize(x[i]);}
   }
 
-  template<class T>
-  inline void deserialize(std::vector<T> & x)
+  template<typename T, typename Allocator>
+  inline void deserialize(std::vector<T, Allocator> & x)
   {
     const uint32_t sz = deserialize_len(1);
     x.resize(sz);
     deserializeA(x.data(), sz);
   }
-  inline void deserialize(std::vector<bool> & x)
+  template<typename Allocator>
+  inline void deserialize(std::vector<bool, Allocator> & x)
   {
     const uint32_t sz = deserialize_len(sizeof(unsigned char));
     x.resize(sz);
@@ -264,10 +269,12 @@ public:
   inline cycprint & operator>>(uint64_t & x) {print(x); return *this;}
   inline cycprint & operator>>(float & x) {print(x); return *this;}
   inline cycprint & operator>>(double & x) {print(x); return *this;}
-  inline cycprint & operator>>(std::string & x) {print(x); return *this;}
-  inline cycprint & operator>>(std::wstring & x) {print(x); return *this;}
-  template<class T>
-  inline cycprint & operator>>(std::vector<T> & x) {print(x); return *this;}
+  template<typename Allocator>
+  inline cycprint & operator>>(std::basic_string<char, std::char_traits<char>, Allocator> & x) {print(x); return *this;}
+  template<typename Allocator>
+  inline cycprint & operator>>(std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator> & x) {print(x); return *this;}
+  template<class T, class Allocator>
+  inline cycprint & operator>>(std::vector<T, Allocator> & x) {print(x); return *this;}
   template<class T, size_t S>
   inline cycprint & operator>>(std::array<T, S> & x) {print(x); return *this;}
 
@@ -329,7 +336,8 @@ public:
     validate_size(sz, el_sz);
     return sz;
   }
-  inline void print(std::string & x)
+  template<typename Allocator>
+  inline void print(std::basic_string<char, std::char_traits<char>, Allocator> & x)
   {
     const uint32_t sz = get_len(sizeof(char));
     validate_str(sz);
@@ -338,11 +346,12 @@ public:
     prtf(&buf, &bufsize, "\"%*.*s\"", len, len, static_cast<const char *>(data + pos));
     pos += sz;
   }
-  inline void print(std::wstring & x)
+  template<typename Allocator>
+  inline void print(std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator> & x)
   {
     const uint32_t sz = get_len(sizeof(wchar_t));
     // wstring is not null-terminated in cdr
-    x = std::wstring(reinterpret_cast<const wchar_t *>(data + pos), sz);
+    x = std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>(reinterpret_cast<const wchar_t *>(data + pos), sz);
     prtf(&buf, &bufsize, "\"%ls\"", x.c_str());
     pos += sz * sizeof(wchar_t);
   }
@@ -358,8 +367,8 @@ public:
     prtf(&buf, &bufsize, "}");
   }
 
-  template<class T>
-  inline void print(std::vector<T> & x)
+  template<class T, class Allocator>
+  inline void print(std::vector<T, Allocator> & x)
   {
     const uint32_t sz = get_len(1);
     printA(x.data(), sz);
diff --git a/rmw_cyclonedds_cpp/src/u16string.cpp b/rmw_cyclonedds_cpp/src/u16string.cpp
index 562041a..c3f8711 100644
--- a/rmw_cyclonedds_cpp/src/u16string.cpp
+++ b/rmw_cyclonedds_cpp/src/u16string.cpp
@@ -18,7 +18,7 @@
 namespace rmw_cyclonedds_cpp
 {
 
-void u16string_to_wstring(const std::u16string & u16str, std::wstring & wstr)
+void u16string_to_wstring(const std::basic_string<char16_t, std::char_traits<char16_t>, std::pmr::polymorphic_allocator<char16_t>> & u16str, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> & wstr)
 {
   wstr.resize(u16str.size());
   for (size_t i = 0; i < u16str.size(); ++i) {
@@ -26,7 +26,7 @@ void u16string_to_wstring(const std::u16string & u16str, std::wstring & wstr)
   }
 }
 
-bool wstring_to_u16string(const std::wstring & wstr, std::u16string & u16str)
+bool wstring_to_u16string(const std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> & wstr, std::basic_string<char16_t, std::char_traits<char16_t>, std::pmr::polymorphic_allocator<char16_t>> & u16str)
 {
   try {
     u16str.resize(wstr.size());
@@ -39,7 +39,7 @@ bool wstring_to_u16string(const std::wstring & wstr, std::u16string & u16str)
   return true;
 }
 
-void u16string_to_wstring(const rosidl_runtime_c__U16String & u16str, std::wstring & wstr)
+void u16string_to_wstring(const rosidl_runtime_c__U16String & u16str, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> & wstr)
 {
   wstr.resize(u16str.size);
   for (size_t i = 0; i < u16str.size; ++i) {
@@ -47,7 +47,7 @@ void u16string_to_wstring(const rosidl_runtime_c__U16String & u16str, std::wstri
   }
 }
 
-bool wstring_to_u16string(const std::wstring & wstr, rosidl_runtime_c__U16String & u16str)
+bool wstring_to_u16string(const std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> & wstr, rosidl_runtime_c__U16String & u16str)
 {
   bool succeeded = rosidl_runtime_c__U16String__resize(&u16str, wstr.size());
   if (!succeeded) {
diff --git a/rmw_cyclonedds_cpp/src/u16string.hpp b/rmw_cyclonedds_cpp/src/u16string.hpp
index 4019aa8..6791f01 100644
--- a/rmw_cyclonedds_cpp/src/u16string.hpp
+++ b/rmw_cyclonedds_cpp/src/u16string.hpp
@@ -22,14 +22,14 @@ namespace rmw_cyclonedds_cpp
 {
 
 void u16string_to_wstring(
-  const rosidl_runtime_c__U16String & u16str, std::wstring & wstr);
+  const rosidl_runtime_c__U16String & u16str, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> & wstr);
 
 bool wstring_to_u16string(
-  const std::wstring & wstr, rosidl_runtime_c__U16String & u16str);
+  const std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> & wstr, rosidl_runtime_c__U16String & u16str);
 
-void u16string_to_wstring(const std::u16string & u16str, std::wstring & wstr);
+void u16string_to_wstring(const std::basic_string<char16_t, std::char_traits<char16_t>, std::pmr::polymorphic_allocator<char16_t>> & u16str, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> & wstr);
 
-bool wstring_to_u16string(const std::wstring & wstr, std::u16string & u16str);
+bool wstring_to_u16string(const std::basic_string<wchar_t, std::char_traits<wchar_t>, std::pmr::polymorphic_allocator<wchar_t>> & wstr, std::basic_string<char16_t, std::char_traits<char16_t>, std::pmr::polymorphic_allocator<char16_t>> & u16str);
 
 }  // namespace rmw_cyclonedds_cpp
 
