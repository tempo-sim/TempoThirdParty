diff --git a/cmake/common/check_configuration.cmake b/cmake/common/check_configuration.cmake
index 25c8055..2bc69f7 100644
--- a/cmake/common/check_configuration.cmake
+++ b/cmake/common/check_configuration.cmake
@@ -18,37 +18,48 @@ macro(check_stdcxx)
     if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG OR
         CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR
         CMAKE_CXX_COMPILER_ID MATCHES "QCC")
-        check_cxx_compiler_flag(-std=c++14 SUPPORTS_CXX14)
+        check_cxx_compiler_flag(-std=c++17 SUPPORTS_CXX17)
+        set(HAVE_CXX17 0)
         set(HAVE_CXX14 0)
         set(HAVE_CXX1Y 0)
         set(HAVE_CXX11 0)
         set(HAVE_CXX0X 0)
-        if(SUPPORTS_CXX14)
-            add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-std=c++14>)
+        if(SUPPORTS_CXX17)
+            add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-std=c++17>)
+            set(HAVE_CXX17 1)
             set(HAVE_CXX14 1)
             set(HAVE_CXX1Y 1)
             set(HAVE_CXX11 1)
             set(HAVE_CXX0X 1)
         else()
-            check_cxx_compiler_flag(-std=c++1y SUPPORTS_CXX1Y)
-            if(SUPPORTS_CXX1Y)
-                add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-std=c++1y>)
+            check_cxx_compiler_flag(-std=c++14 SUPPORTS_CXX14)
+            if(SUPPORTS_CXX14)
+                add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-std=c++14>)
+                set(HAVE_CXX14 1)
                 set(HAVE_CXX1Y 1)
                 set(HAVE_CXX11 1)
                 set(HAVE_CXX0X 1)
             else()
-                check_cxx_compiler_flag(-std=c++11 SUPPORTS_CXX11)
-                if(SUPPORTS_CXX11)
-                    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-std=c++11>)
+                check_cxx_compiler_flag(-std=c++1y SUPPORTS_CXX1Y)
+                if(SUPPORTS_CXX1Y)
+                    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-std=c++1y>)
+                    set(HAVE_CXX1Y 1)
                     set(HAVE_CXX11 1)
                     set(HAVE_CXX0X 1)
                 else()
-                    check_cxx_compiler_flag(-std=c++0x SUPPORTS_CXX0X)
-                    if(SUPPORTS_CXX0X)
-                        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-std=c++0x>)
+                    check_cxx_compiler_flag(-std=c++11 SUPPORTS_CXX11)
+                    if(SUPPORTS_CXX11)
+                        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-std=c++11>)
+                        set(HAVE_CXX11 1)
                         set(HAVE_CXX0X 1)
                     else()
-                        set(HAVE_CXX0X 0)
+                        check_cxx_compiler_flag(-std=c++0x SUPPORTS_CXX0X)
+                        if(SUPPORTS_CXX0X)
+                            add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-std=c++0x>)
+                            set(HAVE_CXX0X 1)
+                        else()
+                            set(HAVE_CXX0X 0)
+                        endif()
                     endif()
                 endif()
             endif()
diff --git a/include/fastcdr/Cdr.h b/include/fastcdr/Cdr.h
index 6e7bae1..53c42c7 100644
--- a/include/fastcdr/Cdr.h
+++ b/include/fastcdr/Cdr.h
@@ -23,12 +23,31 @@
 #include <vector>
 #include <map>
 #include <iostream>
+#ifdef __linux__
+#include <experimental/memory_resource>
+#include <experimental/vector>
+#include <experimental/string>
+#else
+#include <memory_resource>
+#include <vector>
+#include <string>
+#endif
 
-#if !__APPLE__ && !__FreeBSD__ && !__VXWORKS__
+#ifdef __linux__
+namespace std::pmr
+{
+  using string = std::experimental::pmr::string;
+  template <class _ValueT>
+  using vector = std::experimental::pmr::vector<_ValueT>;
+  using wstring = std::experimental::pmr::wstring;
+}
+#endif
+
+#if !(defined(__APPLE__) && __APPLE__) && !(defined(__FreeBSD__) && __FreeBSD__) && !(defined(__VXWORKS__) && __VXWORKS__)
 #include <malloc.h>
 #else
 #include <stdlib.h>
-#endif // if !__APPLE__ && !__FreeBSD__ && !__VXWORKS__
+#endif // #if !(defined(__APPLE__) && __APPLE__) && !(defined(__FreeBSD__) && __FreeBSD__) && !(defined(__VXWORKS__) && __VXWORKS__)
 
 #if HAVE_CXX0X
 #include <array>
@@ -470,8 +489,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline Cdr& operator <<(
-            const std::string& string_t)
+            const std::basic_string<char, std::char_traits<char>, Allocator>& string_t)
     {
         return serialize(string_t);
     }
@@ -482,8 +502,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline Cdr& operator <<(
-            const std::wstring& string_t)
+            const std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>& string_t)
     {
         return serialize(string_t);
     }
@@ -510,11 +531,11 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
-    template<class _T>
+    template<class _T, class Allocator>
     inline Cdr& operator <<(
-            const std::vector<_T>& vector_t)
+            const std::vector<_T, Allocator>& vector_t)
     {
-        return serialize<_T>(vector_t);
+        return serialize<_T, Allocator>(vector_t);
     }
 
     /*!
@@ -735,8 +756,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline Cdr& operator >>(
-            std::string& string_t)
+            std::basic_string<char, std::char_traits<char>, Allocator>& string_t)
     {
         return deserialize(string_t);
     }
@@ -747,8 +769,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline Cdr& operator >>(
-            std::wstring& string_t)
+            std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>& string_t)
     {
         return deserialize(string_t);
     }
@@ -775,11 +798,11 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
-    template<class _T>
+    template<class _T, class Allocator>
     inline Cdr& operator >>(
-            std::vector<_T>& vector_t)
+            std::vector<_T, Allocator>& vector_t)
     {
-        return deserialize<_T>(vector_t);
+        return deserialize<_T, Allocator>(vector_t);
     }
 
     /*!
@@ -1203,27 +1226,29 @@ public:
             Endianness endianness);
 
     /*!
-     * @brief This function serializes a std::string.
+     * @brief This function serializes a std::basic_string.
      * @param string_t The string that will be serialized in the buffer.
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& serialize(
-            const std::string& string_t)
+            const std::basic_string<char, std::char_traits<char>, Allocator>& string_t)
     {
         return serialize(string_t.c_str());
     }
 
     /*!
-     * @brief This function serializes a std::wstring.
+     * @brief This function serializes a std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>.
      * @param string_t The wstring that will be serialized in the buffer.
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& serialize(
-            const std::wstring& string_t)
+            const std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>& string_t)
     {
         return serialize(string_t.c_str());
     }
@@ -1235,9 +1260,10 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& serialize(
-            const std::string& string_t,
+            const std::basic_string<char, std::char_traits<char>, Allocator>& string_t,
             Endianness endianness)
     {
         return serialize(string_t.c_str(), endianness);
@@ -1281,9 +1307,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
-    template<class _T = bool>
+    template<class _T = bool, class Allocator>
     Cdr& serialize(
-            const std::vector<bool>& vector_t)
+            const std::vector<bool, Allocator>& vector_t)
     {
         return serializeBoolSequence(vector_t);
     }
@@ -1296,9 +1322,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
-    template<class _T>
+    template<class _T, class Allocator>
     Cdr& serialize(
-            const std::vector<_T>& vector_t)
+            const std::vector<_T, Allocator>& vector_t)
     {
         state state_before_error(*this);
 
@@ -1356,9 +1382,16 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
-    template<>
-    Cdr& serialize<bool>(
-            const std::vector<bool>& vector_t)
+    template <>
+    Cdr& serialize<bool, std::allocator<bool>>(
+            const std::vector<bool, std::allocator<bool>>& vector_t)
+    {
+        return serializeBoolSequence(vector_t);
+    }
+
+    template <>
+    Cdr& serialize<bool, std::pmr::polymorphic_allocator<bool>>(
+            const std::vector<bool, std::pmr::polymorphic_allocator<bool>>& vector_t)
     {
         return serializeBoolSequence(vector_t);
     }
@@ -1372,13 +1405,14 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
-    template<class _T>
+    template<class _T, class Allocator>
     Cdr& serialize(
-            const std::vector<_T>& vector_t,
+            const std::vector<_T, Allocator>& vector_t,
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -1803,9 +1837,10 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& serializeArray(
-            const std::string* string_t,
+            const std::basic_string<char, std::char_traits<char>, Allocator>* string_t,
             size_t numElements)
     {
         for (size_t count = 0; count < numElements; ++count)
@@ -1822,9 +1857,10 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& serializeArray(
-            const std::wstring* string_t,
+            const std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>* string_t,
             size_t numElements)
     {
         for (size_t count = 0; count < numElements; ++count)
@@ -1842,14 +1878,16 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& serializeArray(
-            const std::string* string_t,
+            const std::basic_string<char, std::char_traits<char>, Allocator>* string_t,
             size_t numElements,
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -1873,14 +1911,16 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& serializeArray(
-            const std::wstring* string_t,
+            const std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>* string_t,
             size_t numElements,
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -1903,9 +1943,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to serialize a position that exceeds the internal memory size.
      */
-    template<class _T>
+    template<class _T, class Allocator>
     Cdr& serializeArray(
-            const std::vector<_T>* vector_t,
+            const std::vector<_T, Allocator>* vector_t,
             size_t numElements)
     {
         for (size_t count = 0; count < numElements; ++count)
@@ -1949,7 +1989,8 @@ public:
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -2009,7 +2050,8 @@ public:
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -2426,18 +2468,19 @@ public:
             Endianness endianness);
 
     /*!
-     * @brief This function deserializes a std::string.
+     * @brief This function deserializes a std::basic_string.
      * @param string_t The variable that will store the string read from the buffer.
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& deserialize(
-            std::string& string_t)
+            std::basic_string<char, std::char_traits<char>, Allocator>& string_t)
     {
         uint32_t length = 0;
         const char* str = readString(length);
-        string_t = std::string(str, length);
+        string_t.assign(str, length);
         return *this;
     }
 
@@ -2447,12 +2490,14 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& deserialize(
-            std::wstring& string_t)
+            std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>& string_t)
     {
         uint32_t length = 0;
-        string_t = readWString(length);
+        std::wstring str = readWString(length);
+        string_t.assign(str.c_str(), length);
         return *this;
     }
 
@@ -2463,13 +2508,15 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& deserialize(
-            std::string& string_t,
+            std::basic_string<char, std::char_traits<char>, Allocator>& string_t,
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -2492,13 +2539,15 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& deserialize(
-            std::wstring& string_t,
+            std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>& string_t,
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -2552,9 +2601,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
-    template<class _T = bool>
+    template<class _T = bool, class Allocator>
     Cdr& deserialize(
-            std::vector<bool>& vector_t)
+            std::vector<bool, Allocator>& vector_t)
     {
         return deserializeBoolSequence(vector_t);
     }
@@ -2567,9 +2616,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
-    template<class _T>
+    template<class _T, class Allocator>
     Cdr& deserialize(
-            std::vector<_T>& vector_t)
+            std::vector<_T, Allocator>& vector_t)
     {
         uint32_t seqLength = 0;
         state state_before_error(*this);
@@ -2645,9 +2694,16 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
-    template<>
-    Cdr& deserialize<bool>(
-            std::vector<bool>& vector_t)
+    template <>
+    Cdr& deserialize<bool, std::allocator<bool>>(
+            std::vector<bool, std::allocator<bool>>& vector_t)
+    {
+        return deserializeBoolSequence(vector_t);
+    }
+
+    template <>
+    Cdr& deserialize<bool, std::pmr::polymorphic_allocator<bool>>(
+            std::vector<bool, std::pmr::polymorphic_allocator<bool>>& vector_t)
     {
         return deserializeBoolSequence(vector_t);
     }
@@ -2661,13 +2717,14 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
-    template<class _T>
+    template<class _T, class Allocator>
     Cdr& deserialize(
-            std::vector<_T>& vector_t,
+            std::vector<_T, Allocator>& vector_t,
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -3090,9 +3147,10 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& deserializeArray(
-            std::string* string_t,
+            std::basic_string<char, std::char_traits<char>, Allocator>* string_t,
             size_t numElements)
     {
         for (size_t count = 0; count < numElements; ++count)
@@ -3109,9 +3167,10 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& deserializeArray(
-            std::wstring* string_t,
+            std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>* string_t,
             size_t numElements)
     {
         for (size_t count = 0; count < numElements; ++count)
@@ -3129,14 +3188,16 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class T, class Traits, class Allocator>
     inline
     Cdr& deserializeArray(
-            std::string* string_t,
+            std::basic_string<char, std::char_traits<char>, Allocator>* string_t,
             size_t numElements,
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -3160,14 +3221,16 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
+    template <class Allocator>
     inline
     Cdr& deserializeArray(
-            std::wstring* string_t,
+            std::basic_string<wchar_t, std::char_traits<wchar_t>, Allocator>* string_t,
             size_t numElements,
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -3190,9 +3253,9 @@ public:
      * @return Reference to the eprosima::fastcdr::Cdr object.
      * @exception exception::NotEnoughMemoryException This exception is thrown when trying to deserialize a position that exceeds the internal memory size.
      */
-    template<class _T>
+    template<class _T, class Allocator>
     Cdr& deserializeArray(
-            std::vector<_T>* vector_t,
+            std::vector<_T, Allocator>* vector_t,
             size_t numElements)
     {
         for (size_t count = 0; count < numElements; ++count)
@@ -3236,7 +3299,8 @@ public:
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -3379,7 +3443,8 @@ public:
             Endianness endianness)
     {
         bool auxSwap = m_swapBytes;
-        m_swapBytes = (m_swapBytes && (m_endianness == endianness)) || (!m_swapBytes && (m_endianness != endianness));
+        m_swapBytes = (m_swapBytes && (static_cast<Endianness>(m_endianness) == endianness)) ||
+                (!m_swapBytes && (static_cast<Endianness>(m_endianness) != endianness));
 
         try
         {
@@ -3408,15 +3473,31 @@ private:
 
     Cdr& deserializeBoolSequence(
             std::vector<bool>& vector_t);
-
+  
     Cdr& deserializeStringSequence(
             std::string*& sequence_t,
             size_t& numElements);
-
+  
     Cdr& deserializeWStringSequence(
             std::wstring*& sequence_t,
             size_t& numElements);
 
+#if defined(_MSC_VER) || _LIBCPP_STD_VER >= 17
+    Cdr& serializeBoolSequence(
+            const std::pmr::vector<bool>& vector_t);
+  
+    Cdr& deserializeBoolSequence(
+            std::pmr::vector<bool>& vector_t);
+  
+    Cdr& deserializeStringSequence(
+            std::pmr::string*& sequence_t,
+            size_t& numElements);
+  
+    Cdr& deserializeWStringSequence(
+            std::pmr::wstring*& sequence_t,
+            size_t& numElements);
+#endif // defined(_MSC_VER) || _LIBCPP_STD_VER >= 17
+
 #if HAVE_CXX0X
     /*!
      * @brief This function template detects the content type of the STD container array and serializes the array.
diff --git a/include/fastcdr/config.h.in b/include/fastcdr/config.h.in
index 26a6320..0d6fc59 100644
--- a/include/fastcdr/config.h.in
+++ b/include/fastcdr/config.h.in
@@ -36,7 +36,9 @@
 #endif
 
 #if HAVE_CXX_CONSTEXPR
+#ifndef CONSTEXPR
 #define CONSTEXPR constexpr
+#endif
 #else
 #define CONSTEXPR const
 #endif
diff --git a/src/cpp/Cdr.cpp b/src/cpp/Cdr.cpp
index 4a8bb25..745a6f7 100644
--- a/src/cpp/Cdr.cpp
+++ b/src/cpp/Cdr.cpp
@@ -2649,6 +2649,43 @@ Cdr& Cdr::serializeBoolSequence(
     return *this;
 }
 
+#if defined(_MSC_VER) || _LIBCPP_STD_VER >= 17
+Cdr& Cdr::serializeBoolSequence(
+        const std::pmr::vector<bool>& vector_t)
+{
+    state state_before_error(*this);
+
+    *this << static_cast<int32_t>(vector_t.size());
+
+    size_t totalSize = vector_t.size() * sizeof(bool);
+
+    if (((m_lastPosition - m_currentPosition) >= totalSize) || resize(totalSize))
+    {
+        // Save last datasize.
+        m_lastDataSize = sizeof(bool);
+
+        for (size_t count = 0; count < vector_t.size(); ++count)
+        {
+            uint8_t value = 0;
+            std::pmr::vector<bool>::const_reference ref = vector_t[count];
+
+            if (ref)
+            {
+                value = 1;
+            }
+            m_currentPosition++ << value;
+        }
+    }
+    else
+    {
+        setState(state_before_error);
+        throw NotEnoughMemoryException(NotEnoughMemoryException::NOT_ENOUGH_MEMORY_MESSAGE_DEFAULT);
+    }
+
+    return *this;
+}
+#endif
+
 Cdr& Cdr::deserializeBoolSequence(
         std::vector<bool>& vector_t)
 {
@@ -2693,6 +2730,52 @@ Cdr& Cdr::deserializeBoolSequence(
     return *this;
 }
 
+#if defined(_MSC_VER) || _LIBCPP_STD_VER >= 17
+Cdr& Cdr::deserializeBoolSequence(
+            std::pmr::vector<bool>& vector_t)
+{
+    uint32_t seqLength = 0;
+    state state_before_error(*this);
+
+    *this >> seqLength;
+
+    size_t totalSize = seqLength * sizeof(bool);
+
+    if ((m_lastPosition - m_currentPosition) >= totalSize)
+    {
+        vector_t.resize(seqLength);
+        // Save last datasize.
+        m_lastDataSize = sizeof(bool);
+
+        for (uint32_t count = 0; count < seqLength; ++count)
+        {
+            uint8_t value = 0;
+            m_currentPosition++ >> value;
+
+            if (value == 1)
+            {
+                vector_t[count] = true;
+            }
+            else if (value == 0)
+            {
+                vector_t[count] = false;
+            }
+            else
+            {
+                throw BadParamException("Unexpected byte value in Cdr::deserializeBoolSequence, expected 0 or 1");
+            }
+        }
+    }
+    else
+    {
+        setState(state_before_error);
+        throw NotEnoughMemoryException(NotEnoughMemoryException::NOT_ENOUGH_MEMORY_MESSAGE_DEFAULT);
+    }
+
+    return *this;
+}
+#endif
+
 Cdr& Cdr::deserializeStringSequence(
         std::string*& sequence_t,
         size_t& numElements)
@@ -2719,6 +2802,34 @@ Cdr& Cdr::deserializeStringSequence(
     return *this;
 }
 
+#if defined(_MSC_VER) || _LIBCPP_STD_VER >= 17
+Cdr& Cdr::deserializeStringSequence(
+        std::pmr::string*& sequence_t,
+        size_t& numElements)
+{
+    uint32_t seqLength = 0;
+    state state_before_error(*this);
+
+    deserialize(seqLength);
+
+    try
+    {
+        sequence_t = new std::pmr::string[seqLength];
+        deserializeArray(sequence_t, seqLength);
+    }
+    catch (eprosima::fastcdr::exception::Exception& ex)
+    {
+        delete [] sequence_t;
+        sequence_t = NULL;
+        setState(state_before_error);
+        ex.raise();
+    }
+
+    numElements = seqLength;
+    return *this;
+}
+#endif
+
 Cdr& Cdr::deserializeWStringSequence(
         std::wstring*& sequence_t,
         size_t& numElements)
@@ -2744,3 +2855,31 @@ Cdr& Cdr::deserializeWStringSequence(
     numElements = seqLength;
     return *this;
 }
+
+#if defined(_MSC_VER) || _LIBCPP_STD_VER >= 17
+Cdr& Cdr::deserializeWStringSequence(
+        std::pmr::wstring*& sequence_t,
+        size_t& numElements)
+{
+    uint32_t seqLength = 0;
+    state state_before_error(*this);
+
+    deserialize(seqLength);
+
+    try
+    {
+        sequence_t = new std::pmr::wstring[seqLength];
+        deserializeArray(sequence_t, seqLength);
+    }
+    catch (eprosima::fastcdr::exception::Exception& ex)
+    {
+        delete [] sequence_t;
+        sequence_t = NULL;
+        setState(state_before_error);
+        ex.raise();
+    }
+
+    numElements = seqLength;
+    return *this;
+}
+#endif
