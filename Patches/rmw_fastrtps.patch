diff --git a/rmw_fastrtps_dynamic_cpp/include/rmw_fastrtps_dynamic_cpp/TypeSupport.hpp b/rmw_fastrtps_dynamic_cpp/include/rmw_fastrtps_dynamic_cpp/TypeSupport.hpp
index 2708392..88e324b 100644
--- a/rmw_fastrtps_dynamic_cpp/include/rmw_fastrtps_dynamic_cpp/TypeSupport.hpp
+++ b/rmw_fastrtps_dynamic_cpp/include/rmw_fastrtps_dynamic_cpp/TypeSupport.hpp
@@ -48,7 +48,7 @@ namespace rmw_fastrtps_dynamic_cpp
 template<typename MembersType>
 struct StringHelper;
 
-// For C introspection typesupport we create intermediate instances of std::string so that
+// For C introspection typesupport we create intermediate instances of std::pmr::string so that
 // eprosima::fastcdr::Cdr can handle the string properly.
 template<>
 struct StringHelper<rosidl_typesupport_introspection_c__MessageMembers>
@@ -76,7 +76,7 @@ struct StringHelper<rosidl_typesupport_introspection_c__MessageMembers>
     return current_alignment + strlen(c_string->data) + 1;
   }
 
-  static std::string convert_to_std_string(void * data)
+  static std::pmr::string convert_to_std_string(void * data)
   {
     auto c_string = static_cast<rosidl_runtime_c__String *>(data);
     if (!c_string) {
@@ -91,37 +91,37 @@ struct StringHelper<rosidl_typesupport_introspection_c__MessageMembers>
         "rosidl_generator_c_String had invalid data");
       return "";
     }
-    return std::string(c_string->data);
+    return std::pmr::string(c_string->data);
   }
 
-  static std::string convert_to_std_string(rosidl_runtime_c__String & data)
+  static std::pmr::string convert_to_std_string(rosidl_runtime_c__String & data)
   {
-    return std::string(data.data);
+    return std::pmr::string(data.data);
   }
 
   static void assign(eprosima::fastcdr::Cdr & deser, void * field)
   {
-    std::string str;
+    std::pmr::string str;
     deser >> str;
     rosidl_runtime_c__String * c_str = static_cast<rosidl_runtime_c__String *>(field);
     rosidl_runtime_c__String__assign(c_str, str.c_str());
   }
 };
 
-// For C++ introspection typesupport we just reuse the same std::string transparently.
+// For C++ introspection typesupport we just reuse the same std::pmr::string transparently.
 template<>
 struct StringHelper<rosidl_typesupport_introspection_cpp::MessageMembers>
 {
-  using type = std::string;
+  using type = std::pmr::string;
 
-  static std::string & convert_to_std_string(void * data)
+  static std::pmr::string & convert_to_std_string(void * data)
   {
-    return *(static_cast<std::string *>(data));
+    return *(static_cast<std::pmr::string *>(data));
   }
 
   static void assign(eprosima::fastcdr::Cdr & deser, void * field)
   {
-    std::string & str = *(std::string *)field;
+    std::pmr::string & str = *(std::pmr::string *)field;
     deser >> str;
   }
 };
diff --git a/rmw_fastrtps_dynamic_cpp/include/rmw_fastrtps_dynamic_cpp/TypeSupport_impl.hpp b/rmw_fastrtps_dynamic_cpp/include/rmw_fastrtps_dynamic_cpp/TypeSupport_impl.hpp
index 899119f..cccf468 100644
--- a/rmw_fastrtps_dynamic_cpp/include/rmw_fastrtps_dynamic_cpp/TypeSupport_impl.hpp
+++ b/rmw_fastrtps_dynamic_cpp/include/rmw_fastrtps_dynamic_cpp/TypeSupport_impl.hpp
@@ -16,6 +16,7 @@
 #define RMW_FASTRTPS_DYNAMIC_CPP__TYPESUPPORT_IMPL_HPP_
 
 #include <cassert>
+#include <memory_resource>
 #include <string>
 #include <vector>
 
@@ -81,21 +82,21 @@ void serialize_field(
   } else if (member->array_size_ && !member->is_upper_bound_) {
     ser.serializeArray(static_cast<T *>(field), member->array_size_);
   } else {
-    std::vector<T> & data = *reinterpret_cast<std::vector<T> *>(field);
+    std::pmr::vector<T> & data = *reinterpret_cast<std::pmr::vector<T> *>(field);
     ser << data;
   }
 }
 
 template<>
 inline
-void serialize_field<std::wstring>(
+void serialize_field<std::pmr::wstring>(
   const rosidl_typesupport_introspection_cpp::MessageMember * member,
   void * field,
   eprosima::fastcdr::Cdr & ser)
 {
-  std::wstring wstr;
+  std::pmr::wstring wstr;
   if (!member->is_array_) {
-    auto u16str = static_cast<std::u16string *>(field);
+    auto u16str = static_cast<std::pmr::u16string *>(field);
     rosidl_typesupport_fastrtps_cpp::u16string_to_wstring(*u16str, wstr);
     ser << wstr;
   } else {
@@ -108,7 +109,7 @@ void serialize_field<std::wstring>(
     }
     for (size_t i = 0; i < size; ++i) {
       const void * element = member->get_const_function(field, i);
-      auto u16str = static_cast<const std::u16string *>(element);
+      auto u16str = static_cast<const std::pmr::u16string *>(element);
       rosidl_typesupport_fastrtps_cpp::u16string_to_wstring(*u16str, wstr);
       ser << wstr;
     }
@@ -134,7 +135,7 @@ void serialize_field(
 
 template<>
 inline
-void serialize_field<std::string>(
+void serialize_field<std::pmr::string>(
   const rosidl_typesupport_introspection_c__MessageMember * member,
   void * field,
   eprosima::fastcdr::Cdr & ser)
@@ -149,11 +150,11 @@ void serialize_field<std::string>(
     ser << str;
   } else {
     // First, cast field to rosidl_generator_c
-    // Then convert to a std::string using StringHelper and serialize the std::string
+    // Then convert to a std::pmr::string using StringHelper and serialize the std::pmr::string
     if (member->array_size_ && !member->is_upper_bound_) {
       // tmpstring is defined here and not below to avoid
       // memory allocation in every iteration of the for loop
-      std::string tmpstring;
+      std::pmr::string tmpstring;
       auto string_field = static_cast<rosidl_runtime_c__String *>(field);
       for (size_t i = 0; i < member->array_size_; ++i) {
         tmpstring = string_field[i].data;
@@ -162,7 +163,7 @@ void serialize_field<std::string>(
     } else {
       auto & string_sequence_field =
         *reinterpret_cast<rosidl_runtime_c__String__Sequence *>(field);
-      std::vector<std::string> cpp_string_vector;
+      std::pmr::vector<std::pmr::string> cpp_string_vector;
       for (size_t i = 0; i < string_sequence_field.size; ++i) {
         cpp_string_vector.push_back(
           CStringHelper::convert_to_std_string(string_sequence_field.data[i]));
@@ -174,12 +175,12 @@ void serialize_field<std::string>(
 
 template<>
 inline
-void serialize_field<std::wstring>(
+void serialize_field<std::pmr::wstring>(
   const rosidl_typesupport_introspection_c__MessageMember * member,
   void * field,
   eprosima::fastcdr::Cdr & ser)
 {
-  std::wstring wstr;
+  std::pmr::wstring wstr;
   if (!member->is_array_) {
     auto u16str = static_cast<rosidl_runtime_c__U16String *>(field);
     rosidl_typesupport_fastrtps_c::u16string_to_wstring(*u16str, wstr);
@@ -255,10 +256,10 @@ bool TypeSupport<MembersType>::serializeROSmessage(
         serialize_field<uint64_t>(member, field, ser);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_STRING:
-        serialize_field<std::string>(member, field, ser);
+        serialize_field<std::pmr::string>(member, field, ser);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_WSTRING:
-        serialize_field<std::wstring>(member, field, ser);
+        serialize_field<std::pmr::wstring>(member, field, ser);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_MESSAGE:
         {
@@ -315,7 +316,7 @@ size_t next_field_align(
     current_alignment += eprosima::fastcdr::Cdr::alignment(current_alignment, item_size);
     current_alignment += item_size * member->array_size_;
   } else {
-    std::vector<T> & data = *reinterpret_cast<std::vector<T> *>(field);
+    std::pmr::vector<T> & data = *reinterpret_cast<std::pmr::vector<T> *>(field);
     current_alignment += eprosima::fastcdr::Cdr::alignment(current_alignment, padding);
     current_alignment += padding;
     if (!data.empty()) {
@@ -348,7 +349,7 @@ size_t next_field_align_string(
       current_alignment += character_size * (str_arr[index].size() + 1);
     }
   } else {
-    auto & data = *reinterpret_cast<std::vector<T> *>(field);
+    auto & data = *reinterpret_cast<std::pmr::vector<T> *>(field);
     current_alignment += eprosima::fastcdr::Cdr::alignment(current_alignment, padding);
     current_alignment += padding;
     for (auto & it : data) {
@@ -394,7 +395,7 @@ size_t next_field_align_string(
 
 template<>
 inline
-size_t next_field_align_string<std::string>(
+size_t next_field_align_string<std::pmr::string>(
   const rosidl_typesupport_introspection_c__MessageMember * member,
   void * field,
   size_t current_alignment)
@@ -427,7 +428,7 @@ size_t next_field_align_string<std::string>(
 
 template<>
 inline
-size_t next_field_align_string<std::wstring>(
+size_t next_field_align_string<std::pmr::wstring>(
   const rosidl_typesupport_introspection_c__MessageMember * member,
   void * field,
   size_t current_alignment)
@@ -512,10 +513,10 @@ size_t TypeSupport<MembersType>::getEstimatedSerializedSize(
         current_alignment = next_field_align<uint64_t>(member, field, current_alignment);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_STRING:
-        current_alignment = next_field_align_string<std::string>(member, field, current_alignment);
+        current_alignment = next_field_align_string<std::pmr::string>(member, field, current_alignment);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_WSTRING:
-        current_alignment = next_field_align_string<std::wstring>(member, field, current_alignment);
+        current_alignment = next_field_align_string<std::pmr::wstring>(member, field, current_alignment);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_MESSAGE:
         {
@@ -570,39 +571,39 @@ void deserialize_field(
   } else if (member->array_size_ && !member->is_upper_bound_) {
     deser.deserializeArray(static_cast<T *>(field), member->array_size_);
   } else {
-    auto & vector = *reinterpret_cast<std::vector<T> *>(field);
+    auto & vector = *reinterpret_cast<std::pmr::vector<T> *>(field);
     deser >> vector;
   }
 }
 
 template<>
-inline void deserialize_field<std::string>(
+inline void deserialize_field<std::pmr::string>(
   const rosidl_typesupport_introspection_cpp::MessageMember * member,
   void * field,
   eprosima::fastcdr::Cdr & deser)
 {
   if (!member->is_array_) {
-    deser >> *static_cast<std::string *>(field);
+    deser >> *static_cast<std::pmr::string *>(field);
   } else if (member->array_size_ && !member->is_upper_bound_) {
-    std::string * array = static_cast<std::string *>(field);
+    std::pmr::string * array = static_cast<std::pmr::string *>(field);
     deser.deserializeArray(array, member->array_size_);
   } else {
-    auto & vector = *reinterpret_cast<std::vector<std::string> *>(field);
+    auto & vector = *reinterpret_cast<std::pmr::vector<std::pmr::string> *>(field);
     deser >> vector;
   }
 }
 
 template<>
-inline void deserialize_field<std::wstring>(
+inline void deserialize_field<std::pmr::wstring>(
   const rosidl_typesupport_introspection_cpp::MessageMember * member,
   void * field,
   eprosima::fastcdr::Cdr & deser)
 {
-  std::wstring wstr;
+  std::pmr::wstring wstr;
   if (!member->is_array_) {
     deser >> wstr;
     rosidl_typesupport_fastrtps_cpp::wstring_to_u16string(
-      wstr, *static_cast<std::u16string *>(field));
+      wstr, *static_cast<std::pmr::u16string *>(field));
   } else {
     uint32_t size;
     if (member->array_size_ && !member->is_upper_bound_) {
@@ -613,7 +614,7 @@ inline void deserialize_field<std::wstring>(
     }
     for (size_t i = 0; i < size; ++i) {
       void * element = member->get_function(field, i);
-      auto u16str = static_cast<std::u16string *>(element);
+      auto u16str = static_cast<std::pmr::u16string *>(element);
       deser >> wstr;
       rosidl_typesupport_fastrtps_cpp::wstring_to_u16string(wstr, *u16str);
     }
@@ -640,7 +641,7 @@ void deserialize_field(
 }
 
 template<>
-inline void deserialize_field<std::string>(
+inline void deserialize_field<std::pmr::string>(
   const rosidl_typesupport_introspection_c__MessageMember * member,
   void * field,
   eprosima::fastcdr::Cdr & deser)
@@ -653,7 +654,7 @@ inline void deserialize_field<std::string>(
       auto deser_field = static_cast<rosidl_runtime_c__String *>(field);
       // tmpstring is defined here and not below to avoid
       // memory allocation in every iteration of the for loop
-      std::string tmpstring;
+      std::pmr::string tmpstring;
       for (size_t i = 0; i < member->array_size_; ++i) {
         deser.deserialize(tmpstring);
         if (!rosidl_runtime_c__String__assign(&deser_field[i], tmpstring.c_str())) {
@@ -661,7 +662,7 @@ inline void deserialize_field<std::string>(
         }
       }
     } else {
-      std::vector<std::string> cpp_string_vector;
+      std::pmr::vector<std::pmr::string> cpp_string_vector;
       deser >> cpp_string_vector;
 
       auto & string_sequence_field =
@@ -686,12 +687,12 @@ inline void deserialize_field<std::string>(
 }
 
 template<>
-inline void deserialize_field<std::wstring>(
+inline void deserialize_field<std::pmr::wstring>(
   const rosidl_typesupport_introspection_c__MessageMember * member,
   void * field,
   eprosima::fastcdr::Cdr & deser)
 {
-  std::wstring wstr;
+  std::pmr::wstring wstr;
   if (!member->is_array_) {
     deser >> wstr;
     rosidl_typesupport_fastrtps_c::wstring_to_u16string(
@@ -765,10 +766,10 @@ bool TypeSupport<MembersType>::deserializeROSmessage(
         deserialize_field<uint64_t>(member, field, deser);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_STRING:
-        deserialize_field<std::string>(member, field, deser);
+        deserialize_field<std::pmr::string>(member, field, deser);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_WSTRING:
-        deserialize_field<std::wstring>(member, field, deser);
+        deserialize_field<std::pmr::wstring>(member, field, deser);
         break;
       case ::rosidl_typesupport_introspection_cpp::ROS_TYPE_MESSAGE:
         {
