diff --git a/rosidl_typesupport_fastrtps_c/cmake/rosidl_typesupport_fastrtps_c_generate_interfaces.cmake b/rosidl_typesupport_fastrtps_c/cmake/rosidl_typesupport_fastrtps_c_generate_interfaces.cmake
index 4a761ad..9f904b4 100644
--- a/rosidl_typesupport_fastrtps_c/cmake/rosidl_typesupport_fastrtps_c_generate_interfaces.cmake
+++ b/rosidl_typesupport_fastrtps_c/cmake/rosidl_typesupport_fastrtps_c_generate_interfaces.cmake
@@ -110,7 +110,7 @@ endif()
 set_target_properties(${rosidl_generate_interfaces_TARGET}${_target_suffix}
   PROPERTIES
     DEFINE_SYMBOL "ROSIDL_TYPESUPPORT_FASTRTPS_C_BUILDING_DLL_${PROJECT_NAME}"
-    CXX_STANDARD 14)
+    CXX_STANDARD 17)
 
 target_link_libraries(${rosidl_generate_interfaces_TARGET}${_target_suffix} PUBLIC
   fastcdr
diff --git a/rosidl_typesupport_fastrtps_c/include/rosidl_typesupport_fastrtps_c/wstring_conversion.hpp b/rosidl_typesupport_fastrtps_c/include/rosidl_typesupport_fastrtps_c/wstring_conversion.hpp
index ce85914..3d680f3 100644
--- a/rosidl_typesupport_fastrtps_c/include/rosidl_typesupport_fastrtps_c/wstring_conversion.hpp
+++ b/rosidl_typesupport_fastrtps_c/include/rosidl_typesupport_fastrtps_c/wstring_conversion.hpp
@@ -15,6 +15,7 @@
 #ifndef ROSIDL_TYPESUPPORT_FASTRTPS_C__WSTRING_CONVERSION_HPP_
 #define ROSIDL_TYPESUPPORT_FASTRTPS_C__WSTRING_CONVERSION_HPP_
 
+#include <memory_resource>
 #include <string>
 
 #include "rosidl_runtime_c/u16string.h"
@@ -23,24 +24,24 @@
 namespace rosidl_typesupport_fastrtps_c
 {
 
-/// Convert a `rosidl_runtime_c__U16String` into a std::wstring
+/// Convert a `rosidl_runtime_c__U16String` into a std::pmr::wstring
 /**
  * \param[in] u16str The 16-bit character string to copy from.
- * \param[in,out] wstr The std::wstring to copy to.
+ * \param[in,out] wstr The std::pmr::wstring to copy to.
  */
 ROSIDL_TYPESUPPORT_FASTRTPS_C_PUBLIC
 void u16string_to_wstring(
-  const rosidl_runtime_c__U16String & u16str, std::wstring & wstr);
+  const rosidl_runtime_c__U16String & u16str, std::pmr::wstring & wstr);
 
-/// Convert a std::wstring into a `rosidl_runtime_c__U16String`.
+/// Convert a std::pmr::wstring into a `rosidl_runtime_c__U16String`.
 /**
- * \param[in] wstr The std::wstring to copy from.
+ * \param[in] wstr The std::pmr::wstring to copy from.
  * \param[in,out] u16str The u16string to copy to.
  * \return true if resizing u16str and assignment succeeded, otherwise false.
  */
 ROSIDL_TYPESUPPORT_FASTRTPS_C_PUBLIC
 bool wstring_to_u16string(
-  const std::wstring & wstr, rosidl_runtime_c__U16String & u16str);
+  const std::pmr::wstring & wstr, rosidl_runtime_c__U16String & u16str);
 
 }  // namespace rosidl_typesupport_fastrtps_c
 
diff --git a/rosidl_typesupport_fastrtps_c/resource/msg__type_support_c.cpp.em b/rosidl_typesupport_fastrtps_c/resource/msg__type_support_c.cpp.em
index 7ca24f9..6705007 100644
--- a/rosidl_typesupport_fastrtps_c/resource/msg__type_support_c.cpp.em
+++ b/rosidl_typesupport_fastrtps_c/resource/msg__type_support_c.cpp.em
@@ -21,6 +21,7 @@ include_base = '/'.join(include_parts)
 header_files = [
     'cassert',
     'limits',
+    'memory_resource',
     'string',
     # Provides the rosidl_typesupport_fastrtps_c__identifier symbol declaration.
     'rosidl_typesupport_fastrtps_c/identifier.h',
@@ -201,7 +202,7 @@ if isinstance(type_, AbstractNestedType):
       cdr << str->data;
     }
 @[    elif isinstance(member.type.value_type, AbstractWString)]@
-    std::wstring wstr;
+    std::pmr::wstring wstr;
     for (size_t i = 0; i < size; ++i) {
       const rosidl_runtime_c__U16String * str = &array_ptr[i];
       if (str->capacity == 0 || str->capacity <= str->size) {
@@ -246,7 +247,7 @@ if isinstance(type_, AbstractNestedType):
     }
     cdr << str->data;
 @[  elif isinstance(member.type, AbstractWString)]@
-    std::wstring wstr;
+    std::pmr::wstring wstr;
     rosidl_typesupport_fastrtps_c::u16string_to_wstring(ros_message->@(member.name), wstr);
     cdr << wstr;
 @[  elif isinstance(member.type, BasicType) and member.type.typename == 'boolean']@
@@ -342,7 +343,7 @@ else:
       }
     }
 @[    elif isinstance(member.type.value_type, AbstractWString)]@
-    std::wstring wstr;
+    std::pmr::wstring wstr;
     for (size_t i = 0; i < size; ++i) {
       auto & ros_i = array_ptr[i];
       if (!ros_i.data) {
@@ -396,7 +397,7 @@ else:
     if (!ros_message->@(member.name).data) {
       rosidl_runtime_c__U16String__init(&ros_message->@(member.name));
     }
-    std::wstring wstr;
+    std::pmr::wstring wstr;
     cdr >> wstr;
     bool succeeded = rosidl_typesupport_fastrtps_c::wstring_to_u16string(wstr, ros_message->@(member.name));
     if (!succeeded) {
diff --git a/rosidl_typesupport_fastrtps_c/src/wstring_conversion.cpp b/rosidl_typesupport_fastrtps_c/src/wstring_conversion.cpp
index 3b9924f..74ab4b6 100644
--- a/rosidl_typesupport_fastrtps_c/src/wstring_conversion.cpp
+++ b/rosidl_typesupport_fastrtps_c/src/wstring_conversion.cpp
@@ -19,7 +19,7 @@
 namespace rosidl_typesupport_fastrtps_c
 {
 
-void u16string_to_wstring(const rosidl_runtime_c__U16String & u16str, std::wstring & wstr)
+void u16string_to_wstring(const rosidl_runtime_c__U16String & u16str, std::pmr::wstring & wstr)
 {
   wstr.resize(u16str.size);
   for (size_t i = 0; i < u16str.size; ++i) {
@@ -27,7 +27,7 @@ void u16string_to_wstring(const rosidl_runtime_c__U16String & u16str, std::wstri
   }
 }
 
-bool wstring_to_u16string(const std::wstring & wstr, rosidl_runtime_c__U16String & u16str)
+bool wstring_to_u16string(const std::pmr::wstring & wstr, rosidl_runtime_c__U16String & u16str)
 {
   bool succeeded = rosidl_runtime_c__U16String__resize(&u16str, wstr.size());
   if (!succeeded) {
diff --git a/rosidl_typesupport_fastrtps_cpp/cmake/rosidl_typesupport_fastrtps_cpp_generate_interfaces.cmake b/rosidl_typesupport_fastrtps_cpp/cmake/rosidl_typesupport_fastrtps_cpp_generate_interfaces.cmake
index bfb6c9d..cf136a3 100644
--- a/rosidl_typesupport_fastrtps_cpp/cmake/rosidl_typesupport_fastrtps_cpp_generate_interfaces.cmake
+++ b/rosidl_typesupport_fastrtps_cpp/cmake/rosidl_typesupport_fastrtps_cpp_generate_interfaces.cmake
@@ -125,7 +125,7 @@ endif()
 set_target_properties(${rosidl_generate_interfaces_TARGET}${_target_suffix}
   PROPERTIES
     DEFINE_SYMBOL "ROSIDL_TYPESUPPORT_FASTRTPS_CPP_BUILDING_DLL_${PROJECT_NAME}"
-    CXX_STANDARD 14)
+    CXX_STANDARD 17)
 
 # Set compiler flags
 if(NOT WIN32)
diff --git a/rosidl_typesupport_fastrtps_cpp/include/rosidl_typesupport_fastrtps_cpp/wstring_conversion.hpp b/rosidl_typesupport_fastrtps_cpp/include/rosidl_typesupport_fastrtps_cpp/wstring_conversion.hpp
index 35bc7c3..5356e87 100644
--- a/rosidl_typesupport_fastrtps_cpp/include/rosidl_typesupport_fastrtps_cpp/wstring_conversion.hpp
+++ b/rosidl_typesupport_fastrtps_cpp/include/rosidl_typesupport_fastrtps_cpp/wstring_conversion.hpp
@@ -24,20 +24,20 @@ namespace rosidl_typesupport_fastrtps_cpp
 
 /// Convert a std::u16string into a std::wstring
 /**
- * \param[in] u16str The std::u16string character string to copy from.
- * \param[in,out] wstr The std::wstring to copy to.
+ * \param[in] u16str The std::pmr::u16string character string to copy from.
+ * \param[in,out] wstr The std::pmr::wstring to copy to.
  */
 ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC
-void u16string_to_wstring(const std::u16string & u16str, std::wstring & wstr);
+void u16string_to_wstring(const std::pmr::u16string & u16str, std::pmr::wstring & wstr);
 
 /// Convert a std::wstring into a std::u16string.
 /**
- * \param[in] wstr The std::wstring to copy from.
- * \param[in,out] u16str The std::u16string to copy to.
+ * \param[in] wstr The std::pmr::wstring to copy from.
+ * \param[in,out] u16str The std::pmr::u16string to copy to.
  * \return true if resizing u16str and assignment succeeded, otherwise false.
  */
 ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC
-bool wstring_to_u16string(const std::wstring & wstr, std::u16string & u16str);
+bool wstring_to_u16string(const std::pmr::wstring & wstr, std::pmr::u16string & u16str);
 
 }  // namespace rosidl_typesupport_fastrtps_cpp
 
diff --git a/rosidl_typesupport_fastrtps_cpp/resource/msg__type_support.cpp.em b/rosidl_typesupport_fastrtps_cpp/resource/msg__type_support.cpp.em
index 39dc452..c500639 100644
--- a/rosidl_typesupport_fastrtps_cpp/resource/msg__type_support.cpp.em
+++ b/rosidl_typesupport_fastrtps_cpp/resource/msg__type_support.cpp.em
@@ -11,6 +11,7 @@ from rosidl_parser.definition import NamespacedType
 
 header_files = [
     'limits',
+    'memory_resource',
     'stdexcept',
     'string',
     'rosidl_typesupport_cpp/message_type_support.hpp',
@@ -102,7 +103,7 @@ cdr_serialize(
     cdr << ros_message.@(member.name);
 @[      else]@
 @[        if isinstance(member.type.value_type, AbstractWString)]@
-    std::wstring wstr;
+    std::pmr::wstring wstr;
 @[        end if]@
     for (size_t i = 0; i < @(member.type.size); i++) {
 @[        if isinstance(member.type.value_type, NamespacedType)]@
@@ -134,7 +135,7 @@ cdr_serialize(
     }
 @[        else]@
 @[            if isinstance(member.type.value_type, AbstractWString)]@
-    std::wstring wstr;
+    std::pmr::wstring wstr;
 @[            end if]@
     for (size_t i = 0; i < size; i++) {
 @[            if isinstance(member.type.value_type, BasicType) and member.type.value_type.typename == 'boolean']@
@@ -162,7 +163,7 @@ cdr_serialize(
   cdr << static_cast<wchar_t>(ros_message.@(member.name));
 @[  elif isinstance(member.type, AbstractWString)]@
   {
-    std::wstring wstr;
+    std::pmr::wstring wstr;
     rosidl_typesupport_fastrtps_cpp::u16string_to_wstring(ros_message.@(member.name), wstr);
     cdr << wstr;
   }
@@ -192,7 +193,7 @@ cdr_deserialize(
     cdr >> ros_message.@(member.name);
 @[      else]@
 @[        if isinstance(member.type.value_type, AbstractWString)]@
-    std::wstring wstr;
+    std::pmr::wstring wstr;
 @[        end if]@
     for (size_t i = 0; i < @(member.type.size); i++) {
 @[        if isinstance(member.type.value_type, NamespacedType)]@
@@ -223,7 +224,7 @@ cdr_deserialize(
     }
 @[        else]@
 @[            if isinstance(member.type.value_type, AbstractWString)]@
-    std::wstring wstr;
+    std::pmr::wstring wstr;
 @[            end if]@
     for (size_t i = 0; i < size; i++) {
 @[            if isinstance(member.type.value_type, BasicType) and member.type.value_type.typename == 'boolean']@
@@ -266,7 +267,7 @@ cdr_deserialize(
   }
 @[  elif isinstance(member.type, AbstractWString)]@
   {
-    std::wstring wstr;
+    std::pmr::wstring wstr;
     cdr >> wstr;
     bool succeeded = rosidl_typesupport_fastrtps_cpp::wstring_to_u16string(wstr, ros_message.@(member.name));
     if (!succeeded) {
diff --git a/rosidl_typesupport_fastrtps_cpp/src/wstring_conversion.cpp b/rosidl_typesupport_fastrtps_cpp/src/wstring_conversion.cpp
index 387359d..c27adcc 100644
--- a/rosidl_typesupport_fastrtps_cpp/src/wstring_conversion.cpp
+++ b/rosidl_typesupport_fastrtps_cpp/src/wstring_conversion.cpp
@@ -17,7 +17,7 @@
 namespace rosidl_typesupport_fastrtps_cpp
 {
 
-void u16string_to_wstring(const std::u16string & u16str, std::wstring & wstr)
+void u16string_to_wstring(const std::pmr::u16string & u16str, std::pmr::wstring & wstr)
 {
   wstr.resize(u16str.size());
   for (size_t i = 0; i < u16str.size(); ++i) {
@@ -25,7 +25,7 @@ void u16string_to_wstring(const std::u16string & u16str, std::wstring & wstr)
   }
 }
 
-bool wstring_to_u16string(const std::wstring & wstr, std::u16string & u16str)
+bool wstring_to_u16string(const std::pmr::wstring & wstr, std::pmr::u16string & u16str)
 {
   try {
     u16str.resize(wstr.size());
