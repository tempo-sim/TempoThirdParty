diff --git a/image_transport/src/image_transport.cpp b/image_transport/src/image_transport.cpp
index 0afadaf..605e7f9 100644
--- a/image_transport/src/image_transport.cpp
+++ b/image_transport/src/image_transport.cpp
@@ -54,14 +54,20 @@ struct Impl
   }
 };
 
-static Impl * kImpl = new Impl();
+static Impl * get_impl() {
+  static Impl * kImpl = nullptr;
+  if (!kImpl) {
+    kImpl = new Impl();
+  }
+  return kImpl;
+}
 
 Publisher create_publisher(
   rclcpp::Node * node,
   const std::string & base_topic,
   rmw_qos_profile_t custom_qos)
 {
-  return Publisher(node, base_topic, kImpl->pub_loader_, custom_qos);
+  return Publisher(node, base_topic, get_impl()->pub_loader_, custom_qos);
 }
 
 Subscriber create_subscription(
@@ -72,7 +78,7 @@ Subscriber create_subscription(
   rmw_qos_profile_t custom_qos,
   rclcpp::SubscriptionOptions options)
 {
-  return Subscriber(node, base_topic, callback, kImpl->sub_loader_, transport, custom_qos, options);
+  return Subscriber(node, base_topic, callback, get_impl()->sub_loader_, transport, custom_qos, options);
 }
 
 CameraPublisher create_camera_publisher(
@@ -95,7 +101,7 @@ CameraSubscriber create_camera_subscription(
 
 std::vector<std::string> getDeclaredTransports()
 {
-  std::vector<std::string> transports = kImpl->sub_loader_->getDeclaredClasses();
+  std::vector<std::string> transports = get_impl()->sub_loader_->getDeclaredClasses();
   // Remove the "_sub" at the end of each class name.
   for (std::string & transport : transports) {
     transport = erase_last_copy(transport, "_sub");
@@ -107,13 +113,13 @@ std::vector<std::string> getLoadableTransports()
 {
   std::vector<std::string> loadableTransports;
 
-  for (const std::string & transportPlugin : kImpl->sub_loader_->getDeclaredClasses() ) {
+  for (const std::string & transportPlugin : get_impl()->sub_loader_->getDeclaredClasses() ) {
     // If the plugin loads without throwing an exception, add its
     // transport name to the list of valid plugins, otherwise ignore
     // it.
     try {
       std::shared_ptr<image_transport::SubscriberPlugin> sub =
-        kImpl->sub_loader_->createUniqueInstance(transportPlugin);
+        get_impl()->sub_loader_->createUniqueInstance(transportPlugin);
       // Remove the "_sub" at the end of each class name.
       loadableTransports.push_back(erase_last_copy(transportPlugin, "_sub"));
     } catch (const pluginlib::LibraryLoadException & e) {
diff --git a/image_transport/src/publisher.cpp b/image_transport/src/publisher.cpp
index b554125..bf87541 100644
--- a/image_transport/src/publisher.cpp
+++ b/image_transport/src/publisher.cpp
@@ -33,6 +33,7 @@
 #include <string>
 #include <utility>
 #include <vector>
+#include <iostream>
 
 #include "rclcpp/expand_topic_or_service_name.hpp"
 #include "rclcpp/logging.hpp"
@@ -151,6 +152,20 @@ Publisher::Publisher(
   }
 
   if (impl_->publishers_.empty()) {
+    std::cout << "allowlist: ";
+    for (const std::string& elem: allowlist)
+    {
+      std::cout << elem + " ";
+    }
+    std::cout << std::endl;
+
+    std::cout << "all_transport_names: ";
+    for (const std::string& elem: all_transport_names)
+    {
+      std::cout << elem + " ";
+    }
+    std::cout << std::endl;
+
     throw Exception(
             "No plugins found! Does `rospack plugins --attrib=plugin "
             "image_transport` find any packages?");
