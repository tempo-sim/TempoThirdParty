diff --git a/compressed_depth_image_transport/CMakeLists.txt b/compressed_depth_image_transport/CMakeLists.txt
index ded5f73..4faf7fa 100644
--- a/compressed_depth_image_transport/CMakeLists.txt
+++ b/compressed_depth_image_transport/CMakeLists.txt
@@ -3,6 +3,7 @@ cmake_minimum_required(VERSION 3.5)
 project(compressed_depth_image_transport)
 
 # Default to C++14
+set(CMAKE_CXX_STANDARD 20)
 if(NOT CMAKE_CXX_STANDARD)
   set(CMAKE_CXX_STANDARD 14)
 endif()
diff --git a/compressed_depth_image_transport/include/compressed_depth_image_transport/compressed_depth_publisher.h b/compressed_depth_image_transport/include/compressed_depth_image_transport/compressed_depth_publisher.h
index d67af74..cf2c1d0 100644
--- a/compressed_depth_image_transport/include/compressed_depth_image_transport/compressed_depth_publisher.h
+++ b/compressed_depth_image_transport/include/compressed_depth_image_transport/compressed_depth_publisher.h
@@ -53,7 +53,8 @@ protected:
   virtual void advertiseImpl(
           rclcpp::Node * node,
           const std::string &base_topic,
-          rmw_qos_profile_t custom_qos) override final;
+          rmw_qos_profile_t custom_qos,
+          const rclcpp::PublisherOptionsWithAllocator<std::pmr::polymorphic_allocator<void>> & options) override final;
 
   virtual void publish(const sensor_msgs::msg::Image& message,
                        const PublishFn& publish_fn) const override final;
diff --git a/compressed_depth_image_transport/src/codec.cpp b/compressed_depth_image_transport/src/codec.cpp
index 9536d81..09b6358 100644
--- a/compressed_depth_image_transport/src/codec.cpp
+++ b/compressed_depth_image_transport/src/codec.cpp
@@ -68,7 +68,7 @@ sensor_msgs::msg::Image::SharedPtr decodeCompressedDepthImage(
   cv_ptr->header = message.header;
 
   // Assign image encoding
-  std::string image_encoding = message.format.substr(0, message.format.find(';'));
+  std::string image_encoding = std::string(message.format.substr(0, message.format.find(';')).c_str());
   cv_ptr->encoding = image_encoding;
 
   // Decode message data
@@ -177,8 +177,8 @@ sensor_msgs::msg::CompressedImage::SharedPtr encodeCompressedDepthImage(
   params.resize(3, 0);
 
   // Bit depth of image encoding
-  int bitDepth = enc::bitDepth(message.encoding);
-  int numChannels = enc::numChannels(message.encoding);
+  int bitDepth = enc::bitDepth(std::string(message.encoding.c_str()));
+  int numChannels = enc::numChannels(std::string(message.encoding.c_str()));
 
   // Image compression configuration
   ConfigHeader compressionConfig;
diff --git a/compressed_depth_image_transport/src/compressed_depth_publisher.cpp b/compressed_depth_image_transport/src/compressed_depth_publisher.cpp
index 641ce76..bb5e32b 100644
--- a/compressed_depth_image_transport/src/compressed_depth_publisher.cpp
+++ b/compressed_depth_image_transport/src/compressed_depth_publisher.cpp
@@ -60,10 +60,11 @@ namespace compressed_depth_image_transport
 void CompressedDepthPublisher::advertiseImpl(
   rclcpp::Node * node,
   const std::string& base_topic,
-  rmw_qos_profile_t custom_qos)
+  rmw_qos_profile_t custom_qos,
+  const rclcpp::PublisherOptionsWithAllocator<std::pmr::polymorphic_allocator<void>> & options)
 {
   typedef image_transport::SimplePublisherPlugin<sensor_msgs::msg::CompressedImage> Base;
-  Base::advertiseImpl(node, base_topic, custom_qos);
+  Base::advertiseImpl(node, base_topic, custom_qos, options);
 
   node->get_parameter_or<int>("png_level", config_.png_level, kDefaultPngLevel);
   node->get_parameter_or<double>("depth_max", config_.depth_max, kDefaultDepthMax);
diff --git a/compressed_image_transport/CMakeLists.txt b/compressed_image_transport/CMakeLists.txt
index 314c4ca..cbbba42 100644
--- a/compressed_image_transport/CMakeLists.txt
+++ b/compressed_image_transport/CMakeLists.txt
@@ -3,6 +3,7 @@ cmake_minimum_required(VERSION 3.5)
 project(compressed_image_transport)
 
 # Default to C++14
+set(CMAKE_CXX_STANDARD 20)
 if(NOT CMAKE_CXX_STANDARD)
   set(CMAKE_CXX_STANDARD 14)
 endif()
diff --git a/compressed_image_transport/include/compressed_image_transport/compressed_publisher.h b/compressed_image_transport/include/compressed_image_transport/compressed_publisher.h
index 32da028..79df542 100644
--- a/compressed_image_transport/include/compressed_image_transport/compressed_publisher.h
+++ b/compressed_image_transport/include/compressed_image_transport/compressed_publisher.h
@@ -60,7 +60,8 @@ protected:
   void advertiseImpl(
       rclcpp::Node* node,
       const std::string& base_topic,
-      rmw_qos_profile_t custom_qos) override;
+      rmw_qos_profile_t custom_qos,
+      const rclcpp::PublisherOptionsWithAllocator<std::pmr::polymorphic_allocator<void>> & options) override;
 
   void publish(const sensor_msgs::msg::Image& message,
                const PublishFn& publish_fn) const;
diff --git a/compressed_image_transport/src/compressed_publisher.cpp b/compressed_image_transport/src/compressed_publisher.cpp
index ff9d38e..c728d82 100644
--- a/compressed_image_transport/src/compressed_publisher.cpp
+++ b/compressed_image_transport/src/compressed_publisher.cpp
@@ -61,10 +61,11 @@ namespace compressed_image_transport
 void CompressedPublisher::advertiseImpl(
   rclcpp::Node* node,
   const std::string& base_topic,
-  rmw_qos_profile_t custom_qos)
+  rmw_qos_profile_t custom_qos,
+  const rclcpp::PublisherOptionsWithAllocator<std::pmr::polymorphic_allocator<void>> & options)
 {
   typedef image_transport::SimplePublisherPlugin<sensor_msgs::msg::CompressedImage> Base;
-  Base::advertiseImpl(node, base_topic, custom_qos);
+  Base::advertiseImpl(node, base_topic, custom_qos, options);
 
   uint ns_len = node->get_effective_namespace().length();
   std::string param_base_name = base_topic.substr(ns_len);
@@ -182,7 +183,7 @@ void CompressedPublisher::publish(
   }
 
   // Bit depth of image encoding
-  int bitDepth = enc::bitDepth(message.encoding);
+  int bitDepth = enc::bitDepth(std::string(message.encoding.c_str()));
 
   switch (encodingFormat)
   {
@@ -201,7 +202,7 @@ void CompressedPublisher::publish(
       {
         // Target image format
         std::string targetFormat;
-        if (enc::isColor(message.encoding))
+        if (enc::isColor(std::string(message.encoding.c_str())))
         {
           // convert color images to BGR8 format
           targetFormat = "bgr8";
@@ -219,9 +220,10 @@ void CompressedPublisher::publish(
           cv_bridge::CvImageConstPtr cv_ptr = cv_bridge::toCvShare(message, tracked_object, targetFormat);
 
           // Compress image
-          if (cv::imencode(".jpg", cv_ptr->image, compressed.data, params))
+          std::vector<uchar> compressed_data;
+          if (cv::imencode(".jpg", cv_ptr->image, compressed_data, params))
           {
-
+            compressed.data.assign(compressed_data.begin(), compressed_data.end());
             float cRatio = (float)(cv_ptr->image.rows * cv_ptr->image.cols * cv_ptr->image.elemSize())
                 / (float)compressed.data.size();
             RCLCPP_DEBUG(logger_, "Compressed Image Transport - Codec: jpg, Compression Ratio: 1:%.2f (%lu bytes)", cRatio, compressed.data.size());
@@ -263,7 +265,7 @@ void CompressedPublisher::publish(
 
         // Target image format
         stringstream targetFormat;
-        if (enc::isColor(message.encoding))
+        if (enc::isColor(std::string(message.encoding.c_str())))
         {
           // convert color images to RGB domain
           targetFormat << "bgr" << bitDepth;
@@ -277,9 +279,10 @@ void CompressedPublisher::publish(
           cv_bridge::CvImageConstPtr cv_ptr = cv_bridge::toCvShare(message, tracked_object, targetFormat.str());
 
           // Compress image
-          if (cv::imencode(".png", cv_ptr->image, compressed.data, params))
+          std::vector<uchar> compressed_data;
+          if (cv::imencode(".png", cv_ptr->image, compressed_data, params))
           {
-
+            compressed.data.assign(compressed_data.begin(), compressed_data.end());
             float cRatio = (float)(cv_ptr->image.rows * cv_ptr->image.cols * cv_ptr->image.elemSize())
                 / (float)compressed.data.size();
             RCUTILS_LOG_DEBUG("Compressed Image Transport - Codec: png, Compression Ratio: 1:%.2f (%lu bytes)", cRatio, compressed.data.size());
@@ -345,8 +348,10 @@ void CompressedPublisher::publish(
           cv_bridge::CvImageConstPtr cv_ptr = cv_bridge::toCvShare(message, nullptr, "");
 
           // Compress image
-          if (cv::imencode(".tiff", cv_ptr->image, compressed.data, params))
+          std::vector<uchar> compressed_data;
+          if (cv::imencode(".tiff", cv_ptr->image, compressed_data, params))
           {
+            compressed.data.assign(compressed_data.begin(), compressed_data.end());
             float cRatio = static_cast<float>((cv_ptr->image.rows * cv_ptr->image.cols * cv_ptr->image.elemSize()))
                 / static_cast<float>((float)compressed.data.size());
             RCUTILS_LOG_DEBUG("Compressed Image Transport - Codec: tiff, Compression Ratio: 1:%.2f (%lu bytes)", cRatio, compressed.data.size());
diff --git a/compressed_image_transport/src/compressed_subscriber.cpp b/compressed_image_transport/src/compressed_subscriber.cpp
index 335bda8..eb545dd 100644
--- a/compressed_image_transport/src/compressed_subscriber.cpp
+++ b/compressed_image_transport/src/compressed_subscriber.cpp
@@ -118,7 +118,7 @@ void CompressedSubscriber::internalCallback(const CompressedImage::ConstSharedPt
   // Decode color/mono image
   try
   {
-    cv_ptr->image = cv::imdecode(cv::Mat(message->data), config_.imdecode_flag);
+    cv_ptr->image = cv::imdecode(cv::Mat(1, message->data.size(), CV_8UC1, (void*)message->data.data()), config_.imdecode_flag);
 
     // Assign image encoding string
     const size_t split_pos = message->format.find(';');
@@ -139,13 +139,13 @@ void CompressedSubscriber::internalCallback(const CompressedImage::ConstSharedPt
       }
     } else
     {
-      std::string image_encoding = message->format.substr(0, split_pos);
+      std::string image_encoding = std::string(message->format.substr(0, split_pos).c_str());
 
       cv_ptr->encoding = image_encoding;
 
       if ( enc::isColor(image_encoding))
       {
-        std::string compressed_encoding = message->format.substr(split_pos);
+        std::string compressed_encoding = std::string(message->format.substr(split_pos).c_str());
         bool compressed_bgr_image = (compressed_encoding.find("compressed bgr") != std::string::npos);
 
         // Revert color transformation
diff --git a/theora_image_transport/CMakeLists.txt b/theora_image_transport/CMakeLists.txt
index 67612f0..232b7c1 100644
--- a/theora_image_transport/CMakeLists.txt
+++ b/theora_image_transport/CMakeLists.txt
@@ -3,6 +3,7 @@ cmake_minimum_required(VERSION 3.5)
 project(theora_image_transport)
 
 # Default to C++14
+set(CMAKE_CXX_STANDARD 20)
 if(NOT CMAKE_CXX_STANDARD)
   set(CMAKE_CXX_STANDARD 14)
 endif()
@@ -69,6 +70,12 @@ target_link_libraries(${LIBRARY_NAME}
   pluginlib::pluginlib
   rclcpp::rclcpp
 )
+target_link_directories(${LIBRARY_NAME} PRIVATE
+    ${PC_OGG_LIBRARY_DIRS}
+    ${PC_THEORA_LIBRARY_DIRS}
+    ${PC_THEORAENC_LIBRARY_DIRS}
+    ${PC_THEORADEC_LIBRARY_DIRS}
+)
 
 add_executable(ogg_saver src/ogg_saver.cpp)
 target_compile_definitions(ogg_saver PRIVATE
@@ -86,6 +93,12 @@ target_link_libraries(ogg_saver
   rclcpp::rclcpp
   rcutils::rcutils
 )
+target_link_directories(ogg_saver PRIVATE
+    ${PC_OGG_LIBRARY_DIRS}
+    ${PC_THEORA_LIBRARY_DIRS}
+    ${PC_THEORAENC_LIBRARY_DIRS}
+    ${PC_THEORADEC_LIBRARY_DIRS}
+)
 
 ament_export_dependencies(
   rosidl_default_runtime
diff --git a/theora_image_transport/include/theora_image_transport/theora_publisher.h b/theora_image_transport/include/theora_image_transport/theora_publisher.h
index f316a4e..bfcf274 100644
--- a/theora_image_transport/include/theora_image_transport/theora_publisher.h
+++ b/theora_image_transport/include/theora_image_transport/theora_publisher.h
@@ -60,7 +60,8 @@ protected:
     rclcpp::Node* node,
     const std::string &base_topic,
     uint32_t queue_size,
-    rmw_qos_profile_t custom_qos);
+    rmw_qos_profile_t custom_qos,
+    const rclcpp::PublisherOptionsWithAllocator<std::pmr::polymorphic_allocator<void>> & options);
 
   // TODO: Callback to send header packets to new clients
   // virtual void connectCallback(const ros::SingleSubscriberPublisher& pub);
diff --git a/theora_image_transport/package.xml b/theora_image_transport/package.xml
index fdfdde2..344e756 100644
--- a/theora_image_transport/package.xml
+++ b/theora_image_transport/package.xml
@@ -23,9 +23,6 @@
 
   <depend>cv_bridge</depend>
   <depend>image_transport</depend>
-  <depend>libogg</depend>
-  <depend>libopencv-imgproc-dev</depend>
-  <depend>libtheora</depend>
   <depend>pluginlib</depend>
   <depend>rclcpp</depend>
   <depend>rcutils</depend>
diff --git a/theora_image_transport/src/theora_publisher.cpp b/theora_image_transport/src/theora_publisher.cpp
index 65be97b..8c6de83 100644
--- a/theora_image_transport/src/theora_publisher.cpp
+++ b/theora_image_transport/src/theora_publisher.cpp
@@ -75,7 +75,8 @@ void TheoraPublisher::advertiseImpl(
   rclcpp::Node *node,
   const std::string &base_topic,
   uint32_t queue_size,
-  rmw_qos_profile_t custom_qos)
+  rmw_qos_profile_t custom_qos,
+  const rclcpp::PublisherOptionsWithAllocator<std::pmr::polymorphic_allocator<void>> & options)
 {
   logger_ = node->get_logger();
   // queue_size doesn't account for the 3 header packets, so we correct (with a little extra) here.
@@ -87,7 +88,7 @@ void TheoraPublisher::advertiseImpl(
   custom_qos.depth = queue_size + 4;
 
   typedef image_transport::SimplePublisherPlugin<theora_image_transport::msg::Packet> Base;
-  Base::advertiseImpl(node, base_topic, custom_qos);
+  Base::advertiseImpl(node, base_topic, custom_qos, options);
 }
 
   // TODO(ros2): this method should be called when configuration change through
